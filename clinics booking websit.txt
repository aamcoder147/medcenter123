app.py:

# Filename: app.py
# ****** MODIFIED CODE ******
from flask import (
    Flask, render_template, json, request, redirect, url_for,
    send_from_directory, flash, jsonify, make_response
)
import sqlite3
from flask_login import LoginManager, UserMixin, current_user # Assuming you might use login later
import os
from datetime import datetime, timedelta, date
import uuid
from collections import defaultdict # Helpful for aggregation

app = Flask(__name__, static_folder='static')

# Required for flash messages and sessions (if using Flask-Login)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'your_default_secret_key_123') # Use environment variable or secure key

# --- Login Manager Setup (Keep if using authentication) ---
login_manager = LoginManager()
login_manager.init_app(app)
# login_manager.login_view = 'login' # Example: redirect to login page if needed

class User(UserMixin):
    def __init__(self, id):
        self.id = id

@login_manager.user_loader
def load_user(user_id):
    # Replace with your actual user loading logic if using authentication
    # For now, returns a placeholder user if an ID is provided
    if user_id:
         return User(user_id)
    return None # Important for anonymous users

# --- Database Initialization ---
def get_db():
    db_folder = 'database'
    db_path = os.path.join(db_folder, 'bookings.db')
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row # Return dict-like rows for easier access
    return conn

def init_db():
    db_folder = 'database'
    db_path = os.path.join(db_folder, 'bookings.db')
    if not os.path.exists(db_folder):
        os.makedirs(db_folder)

    # Use get_db() to ensure row_factory is set if needed elsewhere too
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    print("Initializing database...")

    # Create Bookings Table (Keep status, keep type for potential future use but don't query for dashboard)
    c.execute('''CREATE TABLE IF NOT EXISTS bookings
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  doctor_id INTEGER NOT NULL,
                  doctor_name TEXT,
                  patient_name TEXT NOT NULL,
                  patient_phone TEXT,
                  booking_date TEXT NOT NULL,
                  booking_time TEXT NOT NULL,
                  notes TEXT,
                  appointment_type TEXT DEFAULT 'Consultation', -- Keeping column, but won't be used in dashboard charts
                  status TEXT DEFAULT 'Pending',               -- Status: Pending, Completed, Cancelled
                  ip_address TEXT,
                  cookie_id TEXT,
                  fingerprint TEXT,
                  user_id INTEGER, -- Consider relationship if using login
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                 )''')
    print("Bookings table checked/created.")

    # --- Check and Add Columns if they don't exist ---
    table_info = c.execute("PRAGMA table_info(bookings)").fetchall()
    column_names = [col[1] for col in table_info]

    if 'appointment_type' not in column_names:
        print("Adding 'appointment_type' column...")
        c.execute("ALTER TABLE bookings ADD COLUMN appointment_type TEXT DEFAULT 'Consultation'")
        print("'appointment_type' column added.")

    if 'status' not in column_names:
        print("Adding 'status' column...")
        c.execute("ALTER TABLE bookings ADD COLUMN status TEXT DEFAULT 'Pending'")
        print("'status' column added.")
    # --- End Column Check ---

    conn.commit()
    conn.close()
    print("Database initialization complete.")

init_db() # Run initialization

# Load doctors data (Keep using JSON for now)
doctors_data_path = 'doctors.json'
try:
    with open(doctors_data_path) as f:
        doctors_data = json.load(f)
except FileNotFoundError:
    print(f"Error: {doctors_data_path} not found. Please create it.")
    doctors_data = {'doctors': []} # Provide a default empty structure

# --- Standard Routes (Home, Booking Page, Confirmation etc.) ---

@app.route('/')
def home():
    return render_template('index.html', doctors=doctors_data.get('doctors', []))


@app.route('/booking/<int:doctor_id>')
def booking_page(doctor_id):
    try:
        doctor = next((d for d in doctors_data.get('doctors', []) if d['id'] == doctor_id), None)
        if not doctor:
             flash('Doctor not found.', 'error')
             return redirect(url_for('home'))

        today_str = date.today().strftime('%Y-%m-%d')

        response = make_response(render_template(
            'booking.html',
            doctor=doctor,
            doctor_id=doctor_id,
            today=today_str
            # REMOVED: availability=doctor.get('availability', {}) # Availability fetched dynamically now
        ))

        if not request.cookies.get('device_id'):
            device_id = str(uuid.uuid4())
            response.set_cookie('device_id', device_id, max_age=30*24*60*60, httponly=True, samesite='Lax')

        return response

    except Exception as e:
        print(f"Error in booking_page for doctor {doctor_id}: {e}")
        flash('An error occurred. Please try again later.', 'error')
        return redirect(url_for('home'))

# --- NEW ROUTE to fetch available slots ---
@app.route('/get-available-slots/<int:doctor_id>/<string:date_str>')
def get_available_slots(doctor_id, date_str):
    try:
        # Validate date format
        booking_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        day_name = booking_date.strftime('%A') # Get 'Monday', 'Tuesday' etc.

        # Find doctor and their general availability for that day
        doctor = next((d for d in doctors_data.get('doctors', []) if d['id'] == doctor_id), None)
        if not doctor:
            return jsonify({'error': 'Doctor not found'}), 404

        doctor_availability = doctor.get('availability', {})
        general_slots = doctor_availability.get(day_name, [])

        if not general_slots or "Unavailable" in general_slots:
             return jsonify([]) # Return empty list if unavailable

        # Query DB for booked slots for this doctor on this date
        conn = get_db()
        c = conn.cursor()
        c.execute('''SELECT booking_time FROM bookings
                     WHERE doctor_id = ? AND booking_date = ? AND status != 'Cancelled' ''',
                  (doctor_id, date_str))
        booked_slots_rows = c.fetchall()
        conn.close()

        booked_times = {row['booking_time'] for row in booked_slots_rows}

        # Filter general slots to get available ones
        available_slots = [slot for slot in general_slots if slot not in booked_times]

        return jsonify(available_slots)

    except ValueError:
        return jsonify({'error': 'Invalid date format'}), 400
    except Exception as e:
        print(f"Error in get_available_slots for doctor {doctor_id}, date {date_str}: {e}")
        return jsonify({'error': 'An internal error occurred'}), 500


@app.route('/confirm-booking', methods=['POST'])
def confirm_booking():
    try:
        doctor_id = int(request.form['doctor_id'])
        patient_name = request.form['patient_name'].strip()
        patient_phone = request.form['patient_phone'].strip()
        booking_date_str = request.form['booking_date']
        # booking_time comes from the hidden input now, set by JS when a card is clicked
        booking_time = request.form.get('booking_time') # Use .get() for safety
        notes = request.form.get('notes', '').strip()
        ip_address = request.remote_addr
        cookie_id = request.cookies.get('device_id')
        user_id = current_user.id if current_user.is_authenticated else None
        fingerprint = request.form.get('fingerprint')
        # appointment_type = request.form.get('appointment_type', 'Consultation') # Still capture if sent

        # --- Basic Validation ---
        if not all([doctor_id, patient_name, patient_phone, booking_date_str, booking_time]):
            flash('⛔ Please fill in all required fields, including selecting a time slot.', 'error')
            # Need to redirect back to booking page
            return redirect(url_for('booking_page', doctor_id=doctor_id))

        doctor = next((d for d in doctors_data.get('doctors', []) if d['id'] == doctor_id), None)
        if not doctor:
            flash('⛔ Invalid Doctor ID.', 'error')
            return redirect(url_for('home'))
        doctor_name = doctor['name']

        booking_date = datetime.strptime(booking_date_str, '%Y-%m-%d').date()
        selected_day_name = booking_date.strftime('%A')
        today_date = date.today()

        # --- Advanced Validation ---
        conn = get_db()
        c = conn.cursor()

        if booking_date < today_date:
            flash('⛔ You cannot book on a date before today.', 'error')
            conn.close()
            return redirect(url_for('booking_page', doctor_id=doctor_id))

        # Check if doctor is generally available (redundant check maybe, but safe)
        # doctor_availability = doctor.get('availability', {})
        # day_schedule = doctor_availability.get(selected_day_name, [])
        # if "Unavailable" in day_schedule or not day_schedule:
        #     flash(f'⛔ {doctor_name} is not available on {selected_day_name}s.', 'error')
        #     conn.close()
        #     return redirect(url_for('booking_page', doctor_id=doctor_id))

        # Check if THIS SPECIFIC slot is already booked (most important check)
        c.execute('''SELECT 1 FROM bookings
                     WHERE doctor_id = ? AND booking_date = ? AND booking_time = ? AND status != 'Cancelled' ''',
                  (doctor_id, booking_date_str, booking_time))
        if c.fetchone():
            flash('⛔ This time slot was just booked. Please select another time.', 'error') # Slightly different msg
            conn.close()
            return redirect(url_for('booking_page', doctor_id=doctor_id))

        # Check for existing booking by patient on the same day
        c.execute('''SELECT 1 FROM bookings
                     WHERE booking_date = ? AND status != 'Cancelled'
                     AND (patient_phone = ? OR (fingerprint IS NOT NULL AND fingerprint = ?) OR patient_name = ?)''',
                  (booking_date_str, patient_phone, fingerprint, patient_name))
        if c.fetchone():
            flash('⛔ You already have another booking scheduled for this day (identified by phone, device, or name). Only one booking per day is allowed.', 'error')
            conn.close()
            return redirect(url_for('booking_page', doctor_id=doctor_id))

        # --- Save to Database ---
        c.execute('''INSERT INTO bookings
                     (doctor_id, doctor_name, patient_name, patient_phone, booking_date, booking_time,
                      notes, status, ip_address, cookie_id, fingerprint, user_id)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', # Removed appointment_type
                  (doctor_id, doctor_name, patient_name, patient_phone, booking_date_str, booking_time,
                   notes, 'Pending', ip_address, cookie_id, fingerprint, user_id))
        conn.commit()
        booking_id = c.lastrowid
        conn.close()

        flash('✅ Booking confirmed successfully!', 'success')
        return redirect(url_for('confirmation', booking_id=booking_id))

    except ValueError as ve:
         print(f"Value error during booking confirmation: {ve}")
         flash('⛔ Invalid data provided (e.g., date format). Please check your input.', 'error')
         # Attempt to redirect back to booking page if doctor_id is available
         try:
             doc_id_for_redirect = int(request.form.get('doctor_id', 0))
             if doc_id_for_redirect:
                 return redirect(url_for('booking_page', doctor_id=doc_id_for_redirect))
         except: pass # Ignore errors trying to get doctor_id for redirect
         return redirect(url_for('home')) # Fallback redirect
    except sqlite3.Error as db_err:
        print(f"Database error during booking confirmation: {db_err}")
        flash('⛔ A database error occurred. Please try again.', 'error')
        # Attempt to redirect back to booking page
        try:
            doc_id_for_redirect = int(request.form.get('doctor_id', 0))
            if doc_id_for_redirect:
                return redirect(url_for('booking_page', doctor_id=doc_id_for_redirect))
        except: pass
        return redirect(url_for('home'))
    except Exception as e:
        print(f"Error confirming booking: {e}")
        flash('⛔ An unexpected error occurred. Please contact support.', 'error')
        # Attempt to redirect back to booking page
        try:
            doc_id_for_redirect = int(request.form.get('doctor_id', 0))
            if doc_id_for_redirect:
                return redirect(url_for('booking_page', doctor_id=doc_id_for_redirect))
        except: pass
        return redirect(url_for('home'))

# --- Other routes remain unchanged ---

@app.route('/confirmation')
def confirmation():
    booking_id = request.args.get('booking_id')
    if not booking_id:
        return redirect(url_for('home'))

    conn = get_db()
    c = conn.cursor()
    # Fetch necessary columns for confirmation page
    c.execute('''SELECT id, doctor_name, patient_name, booking_date, booking_time
                 FROM bookings WHERE id = ?''', (booking_id,))
    booking = c.fetchone()
    conn.close()

    if not booking:
        flash('⛔ Booking not found.', 'error')
        return redirect(url_for('home'))

    # Convert row object to dict for easier template access if needed
    booking_dict = dict(booking) if booking else None
    return render_template('confirmation.html', booking=booking_dict)


@app.route('/delete-booking/<int:booking_id>', methods=['POST'])
def delete_booking(booking_id):
    conn = get_db()
    c = conn.cursor()

    c.execute('SELECT 1 FROM bookings WHERE id = ?', (booking_id,))
    exists = c.fetchone()

    if exists:
        # Instead of deleting, mark as Cancelled
        c.execute("UPDATE bookings SET status = 'Cancelled' WHERE id = ?", (booking_id,))
        conn.commit()
        flash('✅ Booking successfully cancelled.', 'success')
    else:
        flash('⛔ Booking not found.', 'error')

    conn.close()

    source = request.form.get('source', 'home')
    patient_identifier = request.form.get('patient_identifier')
    doctor_id = request.form.get('doctor_id') # Get doctor_id if source is doctor dash

    if source == 'confirmation' or source == 'home':
        return redirect(url_for('home'))
    elif source == 'patient_dashboard' and patient_identifier:
         return redirect(url_for('patient_dashboard', patient_identifier=patient_identifier))
    elif source == 'doctor_dashboard' and doctor_id:
        # Make sure doctor_id is valid before redirecting
        try:
            valid_doctor_id = int(doctor_id)
            return redirect(url_for('doctor_dashboard', doctor_id=valid_doctor_id))
        except (ValueError, TypeError):
             return redirect(url_for('doctor_login')) # Fallback if invalid ID passed
    else:
        return redirect(url_for('home'))


# --- Doctor Login and Dashboard ---

@app.route('/doctor-login', methods=['GET', 'POST'])
def doctor_login():
    if request.method == 'POST':
        doctor_name = request.form.get('doctorName', '').strip()
        doctor_id_str = request.form.get('doctorId', '').strip()

        if not doctor_name or not doctor_id_str or not doctor_id_str.isdigit():
             flash('⛔ Please enter both Doctor Name and a valid ID.', 'error')
             return redirect(url_for('doctor_login'))

        doctor_id = int(doctor_id_str)
        doctor = next((d for d in doctors_data.get('doctors', []) if d['name'] == doctor_name and d['id'] == doctor_id), None)

        if doctor:
            print(f"Doctor login successful: ID {doctor_id}, Name {doctor_name}")
            return redirect(url_for('doctor_dashboard', doctor_id=doctor_id))
        else:
            flash('⛔ Invalid doctor name or ID.', 'error')
            print(f"Doctor login failed: ID {doctor_id_str}, Name {doctor_name}")
            return redirect(url_for('doctor_login'))

    return render_template('doctor_login.html')


@app.route('/doctor-dashboard/<int:doctor_id>')
def doctor_dashboard(doctor_id):
    conn = get_db()
    c = conn.cursor()

    # Fetch bookings for the doctor - EXPLICITLY list needed columns
    c.execute('''SELECT id, doctor_id, doctor_name, patient_name, patient_phone,
                        booking_date, booking_time, notes, status
                 FROM bookings
                 WHERE doctor_id = ? AND status != 'Cancelled'
                 ORDER BY booking_date ASC, booking_time ASC''', (doctor_id,))
    bookings_rows = c.fetchall() # Fetches list of Row objects
    conn.close()

    # --- Data Processing for Stats & Daily Chart ONLY ---
    stats = {
        'today_count': 0,
        'week_count': 0,
        'pending_count': 0,
        'unique_patients_this_month': 0
    }
    appointments_per_day_data = defaultdict(int) # { 'YYYY-MM-DD': count }
    unique_patients_set = set()

    today_date = date.today()
    today_str = today_date.strftime('%Y-%m-%d')
    one_week_later = today_date + timedelta(days=7)
    current_month_str = today_date.strftime('%Y-%m')

    # Access rows by column name
    for booking in bookings_rows:
        try:
            # Convert Row to dict for easier processing if preferred, or access via booking['col_name']
            booking_dict = dict(booking)
            booking_date_obj = datetime.strptime(booking_dict['booking_date'], '%Y-%m-%d').date()
            booking_date_str_loop = booking_dict['booking_date'] # Use a different variable name inside loop
            booking_status = booking_dict['status']

            # Process only future/today's pending bookings for stats/charts
            if booking_date_obj >= today_date and booking_status == 'Pending':

                # --- Stats ---
                if booking_date_str_loop == today_str:
                    stats['today_count'] += 1
                if today_date <= booking_date_obj < one_week_later:
                    stats['week_count'] += 1
                stats['pending_count'] += 1

                # --- Daily Chart Data ---
                if today_date <= booking_date_obj < one_week_later:
                     appointments_per_day_data[booking_date_str_loop] += 1

                # --- Unique Patients (This Month, Future/Today Pending) ---
                if booking_date_str_loop.startswith(current_month_str):
                     patient_identifier = booking_dict['patient_name'] or booking_dict.get('patient_phone')
                     if patient_identifier:
                         unique_patients_set.add(patient_identifier)

        except (ValueError, KeyError, TypeError) as e: # Catch potential errors
            print(f"Warning: Skipping booking due to processing error: {dict(booking)} - Error: {e}")
            continue


    stats['unique_patients_this_month'] = len(unique_patients_set)

    # --- Prepare chart data for Daily Chart ONLY ---
    chart_labels_daily = []
    chart_data_daily = []
    for i in range(7):
        d = today_date + timedelta(days=i)
        d_str = d.strftime('%Y-%m-%d')
        chart_labels_daily.append(d.strftime('%a, %b %d')) # e.g., "Mon, Oct 26"
        chart_data_daily.append(appointments_per_day_data[d_str])

    # --- Organize Bookings for Display ---
    bookings_by_month = defaultdict(lambda: defaultdict(list))
    for booking in bookings_rows:
        try:
            booking_dict = dict(booking) # Convert to dict
            booking_date_dt = datetime.strptime(booking_dict['booking_date'], '%Y-%m-%d')
            month_year = booking_date_dt.strftime('%B %Y')
            day = booking_date_dt.strftime('%Y-%m-%d')
            bookings_by_month[month_year][day].append(booking_dict) # Append the dict
        except (ValueError, KeyError, TypeError) as e:
             print(f"Warning: Skipping booking in display grouping: {dict(booking)} - Error: {e}")
             continue

    # Convert defaultdicts to regular dicts for JSON serialization if needed by template/JS later
    # Although Jinja2 handles defaultdicts fine.
    final_bookings_by_month = {my: dict(days) for my, days in bookings_by_month.items()}

    return render_template(
        'doctor_dashboard.html',
        doctor_id=doctor_id,
        bookings_by_month=final_bookings_by_month, # Pass the converted dict
        stats=stats,
        # Pass ONLY the daily chart config
        chart_config_daily={
            'labels': chart_labels_daily,
            'data': chart_data_daily
        }
    )

# Endpoint to handle note updates
@app.route('/update-all-notes', methods=['POST'])
def update_all_notes():
    if not request.is_json:
        return jsonify({'success': False, 'message': 'Invalid request format, expected JSON.'}), 400
    data = request.get_json()
    updates = data.get('updates', [])
    if not isinstance(updates, list):
         return jsonify({'success': False, 'message': 'Invalid data format, "updates" should be a list.'}), 400

    conn = None
    try:
        conn = get_db() # Use central function
        c = conn.cursor()
        updated_count = 0
        for update in updates:
            booking_id = update.get('bookingId')
            notes = update.get('notes')
            if isinstance(booking_id, (int, str)) and str(booking_id).isdigit() and isinstance(notes, str):
                c.execute('''UPDATE bookings SET notes = ? WHERE id = ?''', (notes.strip(), int(booking_id)))
                if c.rowcount > 0: updated_count += 1
            else: print(f"Warning: Skipping invalid update data: {update}")
        conn.commit()
        print(f"Updated notes for {updated_count} bookings.")
        return jsonify({'success': True, 'message': f'{updated_count} notes updated successfully!'})
    except sqlite3.Error as db_err:
        print(f"Database error updating notes: {db_err}")
        if conn: conn.rollback()
        return jsonify({'success': False, 'message': f'Database error: {db_err}'}), 500
    except Exception as e:
        print(f"Error processing /update-all-notes: {e}")
        if conn: conn.rollback()
        return jsonify({'success': False, 'message': f'An internal error occurred: {e}'}), 500
    finally:
        if conn: conn.close()


# Endpoint to mark booking as complete
@app.route('/mark-complete/<int:booking_id>', methods=['POST'])
def mark_complete(booking_id):
    conn = None
    try:
        conn = get_db() # Use central function
        c = conn.cursor()
        # Ensure we only update 'Pending' bookings to 'Completed'
        c.execute("UPDATE bookings SET status = 'Completed' WHERE id = ? AND status = 'Pending'", (booking_id,))
        conn.commit()
        if c.rowcount > 0:
            print(f"Marked booking {booking_id} as completed.")
            return jsonify({'success': True, 'message': 'Booking marked as completed.'})
        else:
             # Check if already completed or not found/not pending
             c.execute("SELECT status FROM bookings WHERE id = ?", (booking_id,))
             result = c.fetchone()
             if result and result['status'] == 'Completed': # Access by column name
                  message = 'Booking already marked as completed.'
             elif result:
                  message = f'Booking status is {result["status"]}, cannot mark as completed.'
             else:
                  message = 'Booking not found.'
             print(f"Failed to mark booking {booking_id} as completed: {message}")
             return jsonify({'success': False, 'message': message}), 400 # Use 400 Bad Request for logic errors

    except sqlite3.Error as db_err:
        print(f"Database error marking booking {booking_id} complete: {db_err}")
        if conn: conn.rollback()
        return jsonify({'success': False, 'message': f'Database error: {db_err}'}), 500
    except Exception as e:
        print(f"Error processing /mark-complete/{booking_id}: {e}")
        if conn: conn.rollback()
        return jsonify({'success': False, 'message': f'An internal error occurred: {e}'}), 500
    finally:
        if conn: conn.close()


# --- Patient Login and Dashboard ---

@app.route('/patient-login', methods=['GET', 'POST'])
def patient_login():
    if request.method == 'POST':
        patient_identifier = request.form.get('patientIdentifier', '').strip()
        if not patient_identifier:
            flash('⛔ Please enter your name or phone number.', 'error')
            return redirect(url_for('patient_login'))

        conn = get_db() # Use central function
        c = conn.cursor()
        c.execute('''SELECT 1 FROM bookings
                     WHERE (patient_name = ? OR patient_phone = ?) AND status != 'Cancelled' LIMIT 1''',
                  (patient_identifier, patient_identifier))
        booking_exists = c.fetchone()
        conn.close()

        if booking_exists:
            return redirect(url_for('patient_dashboard', patient_identifier=patient_identifier))
        else:
            flash('⛔ No active bookings found for this name or phone number.', 'error')
            return redirect(url_for('patient_login'))

    return render_template('patient_login.html')


@app.route('/patient-dashboard/<path:patient_identifier>')
def patient_dashboard(patient_identifier):
    if not patient_identifier:
         return redirect(url_for('patient_login'))

    conn = get_db() # Use central function
    c = conn.cursor()
    # Explicitly select columns needed for patient dashboard
    c.execute('''SELECT id, doctor_name, patient_name, booking_date, booking_time, status, notes
                 FROM bookings
                 WHERE (patient_name = ? OR patient_phone = ?) AND status != 'Cancelled'
                 ORDER BY booking_date DESC, booking_time DESC''',
              (patient_identifier, patient_identifier))
    bookings_rows = c.fetchall()
    conn.close()

    # Convert rows to dicts for easier template access
    bookings = [dict(row) for row in bookings_rows]

    current_datetime = datetime.now() # Pass object for comparison

    return render_template('patient_dashboard.html',
                         bookings=bookings,
                         current_datetime=current_datetime,
                         patient_identifier=patient_identifier)

# --- Run Application ---
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5003))
    # Set debug=False in production
    # Use host='0.0.0.0' to make accessible on local network
    app.run(debug=True, host='0.0.0.0', port=port)

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

index.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Health Station - Book Your Doctor Appointment</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --bg-accent-light: #e0f7ff;
            --border-color: #dee2e6;
            --border-color-focus: #80bdff;
            --text-dark: #343a40;
            --text-medium: #6c757d;
            --text-light: #ffffff;
            --accent: #007bff;
            --accent-hover: #0056b3;
            --success: #28a745;
            --error: #dc3545;
            --shadow-color: rgba(0, 0, 0, 0.1);
            /* Animation Timing */
            --transition-speed: 0.3s;
            --scroll-animation-duration: 0.6s;
        }

        html {
            scroll-behavior: smooth; /* Smooth scrolling for anchor links */
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Open Sans', 'Lato', 'Segoe UI', sans-serif;
        }

        body {
            background-color: var(--bg-primary);
            color: var(--text-dark);
            line-height: 1.6;
            overflow-x: hidden; /* Prevent horizontal scrollbar caused by animations */
        }

        /* --- Animation Keyframes --- */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* --- Scroll Reveal Helper --- */
        .reveal-on-scroll {
            opacity: 0;
            transform: translateY(30px); /* Initial position */
            transition: opacity var(--scroll-animation-duration) ease-out,
                        transform var(--scroll-animation-duration) ease-out;
            will-change: opacity, transform; /* Optimize for animation */
        }

        .reveal-on-scroll.is-visible {
            opacity: 1;
            transform: translateY(0);
        }

        /* --- Navbar --- */
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem 5%;
            background: var(--bg-primary);
            position: sticky;
            top: 0;
            z-index: 1000;
            transition: box-shadow var(--transition-speed) ease, padding var(--transition-speed) ease;
            border-bottom: 1px solid var(--border-color);
        }

        .navbar.scrolled {
            box-shadow: 0 2px 5px var(--shadow-color);
            padding: 0.6rem 5%; /* Slightly smaller padding on scroll */
        }

        .logo {
            font-size: 1.7rem;
            font-weight: 700;
            color: var(--accent);
            font-family: 'Lato', sans-serif;
            transition: transform var(--transition-speed) ease;
        }
        .logo:hover {
             transform: scale(1.05); /* Subtle scale on hover */
         }

        .nav-actions {
            display: flex;
            gap: 0.8rem;
            align-items: center;
        }

        /* Base Button Style */
        .btn {
            padding: 0.6rem 1.2rem;
            border-radius: 0.3rem;
            cursor: pointer;
            font-weight: 600;
            font-size: 0.9rem;
            text-align: center;
            transition: all var(--transition-speed) ease-in-out;
            border: 1px solid transparent;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.4rem;
            transform: scale(1); /* Base scale for transition */
        }
        .btn:hover {
            transform: scale(1.03); /* Subtle button grow */
            box-shadow: 0 2px 8px rgba(0,0,0,0.1); /* Add shadow on hover */
        }
        .btn:active {
             transform: scale(0.98); /* Click feedback */
         }

        .btn-outline-primary {
            border-color: var(--accent);
            background-color: transparent;
            color: var(--accent);
        }
        .btn-outline-primary:hover {
            background-color: var(--accent);
            color: var(--text-light);
        }

        .btn-primary {
            background-color: var(--accent);
            color: var(--text-light);
            border-color: var(--accent);
        }
        .btn-primary:hover {
            background-color: var(--accent-hover);
            border-color: var(--accent-hover);
        }

        /* --- Hero Section --- */
        .hero-section {
            background-color: var(--bg-secondary);
            padding: 4rem 5% 3rem; /* More vertical padding */
            text-align: center;
            border-bottom: 1px solid var(--border-color);
            overflow: hidden; /* Contain initial animations */
        }

        /* Add initial load animation to hero elements */
        .hero-title, .hero-subtitle, .typing-effect-container, .search-container {
            animation: fadeInUp 0.8s ease-out forwards;
            opacity: 0; /* Start hidden */
        }
        .hero-subtitle { animation-delay: 0.15s; }
        .typing-effect-container { animation-delay: 0.3s; }
        .search-container { animation-delay: 0.45s; }


        .hero-title {
            font-size: 2.3rem; /* Slightly larger */
            margin-bottom: 0.7rem;
            color: var(--text-dark);
            font-weight: 700;
            font-family: 'Lato', sans-serif;
        }

        .hero-subtitle {
            font-size: 1.1rem;
            color: var(--text-medium);
            margin-bottom: 1.5rem;
            max-width: 650px;
            margin-left: auto;
            margin-right: auto;
        }

        .typing-effect-container {
            min-height: 30px;
            margin-bottom: 2.5rem; /* More space */
            font-size: 1.1rem;
            color: var(--accent);
            font-weight: 600;
        }
        #text {
            border-right: 3px solid var(--accent);
            padding-right: 5px;
            display: inline-block;
            white-space: nowrap;
            overflow: hidden;
            vertical-align: bottom;
            animation: blinkCursor 0.7s infinite;
        }
        @keyframes blinkCursor {
            from, to { border-color: transparent; }
            50% { border-color: var(--accent); }
        }

        /* --- Search Container --- */
        .search-container {
            background: var(--bg-primary);
            padding: 1.8rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 15px var(--shadow-color);
            max-width: 900px;
            margin: 0 auto;
            /* Animation is now handled by hero parent */
            border: 1px solid var(--border-color);
            transition: box-shadow var(--transition-speed) ease;
        }
        .search-container:hover {
            box-shadow: 0 6px 20px rgba(0,0,0,0.12); /* Slightly enhance shadow */
        }

        .search-form {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 1rem;
            align-items: center;
        }

        .input-group {
            position: relative;
        }
        .input-group i {
            position: absolute;
            left: 0.8rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-medium);
            font-size: 0.9em;
            transition: color var(--transition-speed) ease;
        }

        select, input[type="text"] {
            width: 100%;
            padding: 0.75rem 0.75rem 0.75rem 2.2rem;
            border: 1px solid var(--border-color);
            border-radius: 0.3rem;
            background: var(--bg-primary);
            color: var(--text-dark);
            font-size: 0.95rem;
            transition: border-color var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
        }
        select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%236c757d' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M7.646 11.854a.5.5 0 0 0 .708 0l4-4a.5.5 0 0 0-.708-.708L8 10.793 4.354 7.146a.5.5 0 1 0-.708.708l4 4z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 0.7rem center;
            background-size: 1em;
            padding-right: 2.5rem;
        }

        select:focus, input[type="text"]:focus {
            outline: none;
            border-color: var(--border-color-focus);
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
         /* Highlight icon on input focus */
        select:focus + i, input[type="text"]:focus + i /* This won't work - Icon needs to be AFTER input */
        /* Or use parent focus-within */
        .input-group:focus-within i {
             color: var(--accent);
         }


        .search-btn { grid-column: span 1; }
        @media (max-width: 680px) {
           .search-form { grid-template-columns: 1fr; }
           .search-btn { width: 100%; justify-content: center; margin-top: 0.5rem; }
        }

        /* --- Doctors Grid --- */
        .doctors-section {
            padding: 4rem 5%; /* Increased padding */
            max-width: 1400px;
            margin: 0 auto;
            background-color: var(--bg-primary);
        }

        .doctors-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.8rem; /* More gap */
        }

        .doctor-card {
            background: var(--bg-primary);
            border-radius: 0.4rem;
            overflow: hidden;
            /* Use the helper class for scroll animation */
            /* transition handled by reveal-on-scroll */
            border: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            transition: transform var(--transition-speed) ease, /* Add smooth transform transition for hover */
                         box-shadow var(--transition-speed) ease,
                         border-color var(--transition-speed) ease;
            transform-origin: center bottom; /* Scale effect origin */
        }
        /* Refined Hover effect for cards */
        .doctor-card:hover {
             transform: translateY(-8px); /* Lift higher */
             border-color: #b8daff;
             box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15); /* Slightly stronger shadow */
         }


        .doctor-photo {
            width: 100%;
            height: 200px;
            object-fit: cover;
            display: block;
            border-bottom: 1px solid var(--border-color);
            filter: saturate(1);
            transition: filter var(--transition-speed) ease, transform var(--transition-speed) ease;
        }
         .doctor-card:hover .doctor-photo {
             filter: saturate(1.1); /* Slightly saturate image on hover */
             transform: scale(1.03); /* Zoom image slightly */
         }

        .doctor-info {
            padding: 1.2rem; /* More padding inside card */
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        .doctor-info h3 {
            color: var(--text-dark);
            margin-bottom: 0.2rem;
            font-size: 1.15rem;
            font-weight: 700;
            transition: color var(--transition-speed) ease;
        }
        .doctor-card:hover .doctor-info h3 {
             color: var(--accent); /* Highlight name on hover */
         }

        .doctor-info .specialization {
            color: var(--accent);
            font-weight: 600;
            margin-bottom: 0.8rem;
            font-size: 0.9rem;
        }

        .doctor-details {
            font-size: 0.88rem;
            color: var(--text-medium);
            margin-bottom: 0.8rem;
            line-height: 1.5;
        }
        .doctor-details p { margin-bottom: 0.3rem; }
        .doctor-details i {
            margin-right: 0.5rem;
            color: var(--text-medium);
            width: 1.1em;
            text-align: center;
            transition: color var(--transition-speed) ease;
        }
        .doctor-card:hover .doctor-details i {
            color: var(--accent); /* Highlight icons on hover */
        }
        .doctor-details i.fa-star { color: #ffc107; }
        .doctor-card:hover .doctor-details i.fa-star { color: #f8ab00; }


        .availability {
            font-size: 0.85rem;
            color: var(--text-medium);
            margin-top: auto;
            padding-top: 0.8rem;
            border-top: 1px solid var(--border-color);
            margin-top: 1rem;
        }
        .availability strong {
           color: var(--text-dark);
           font-weight: 600;
        }

        .book-btn { margin-top: 1rem; width: 100%; }
        #noResultsMessage { color: var(--text-medium); text-align: center; padding: 3rem; font-size: 1.1rem; display: none;}


        /* --- Footer --- */
        .footer {
            background: var(--bg-secondary);
            padding: 4rem 5%;
            margin-top: 4rem; /* More space above footer */
            border-top: 1px solid var(--border-color);
            color: var(--text-medium);
            overflow: hidden; /* Contain scroll animations */
        }

        .footer-content {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 2.5rem; /* More gap in footer */
        }

        /* Add scroll reveal to footer sections */
        .footer-section {
            /* Now uses reveal-on-scroll */
        }


        .footer-section h3 {
            color: var(--text-dark);
            margin-bottom: 1rem;
            font-size: 1.1rem;
            font-weight: 700;
        }

        .footer-links { display: flex; flex-direction: column; gap: 0.5rem; }
        .footer-links a {
            color: var(--text-medium);
            text-decoration: none;
            transition: color var(--transition-speed) ease, padding-left var(--transition-speed) ease; /* Add padding transition */
        }
        .footer-links a:hover {
            color: var(--accent);
            padding-left: 5px; /* Indent link slightly on hover */
            text-decoration: none; /* Keep no underline */
        }

        .social-links { display: flex; gap: 1rem; margin-top: 1rem; }
        .social-links a {
            font-size: 1.3rem;
            color: var(--text-medium);
            transition: color var(--transition-speed) ease, transform var(--transition-speed) ease;
        }
        .social-links a:hover {
            color: var(--accent);
            transform: translateY(-3px) scale(1.1); /* Lift and scale icon */
        }

        .copyright {
            text-align: center;
            margin-top: 4rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
            color: var(--text-medium);
            font-size: 0.85rem;
        }

        /* Flash Messages (Styles remain the same, animation is fine) */
         .flash-messages { position: fixed; top: 90px; right: 20px; z-index: 1050; width: clamp(280px, 90%, 400px); }
         .flash-message { padding: 0.8rem 1.2rem; margin-bottom: 1rem; border-radius: 0.3rem; font-weight: 500; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); opacity: 0; transform: translateX(100%); animation: slideInFadeOut 5s ease-in-out forwards; border: 1px solid transparent; }
         .flash-message.success { background-color: #d4edda; border-color: #c3e6cb; color: #155724; }
         .flash-message.error { background-color: #f8d7da; border-color: #f5c6cb; color: #721c24; }
         .flash-message.info { background-color: #d1ecf1; border-color: #bee5eb; color: #0c5460; }
         @keyframes slideInFadeOut { 0% { opacity: 0; transform: translateX(100%); } 10% { opacity: 1; transform: translateX(0); } 90% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; transform: translateX(100%); } }

        /* Responsive Adjustments */
         @media (max-width: 768px) {
            .hero-title { font-size: 1.9rem; }
            .btn { padding: 0.5rem 1rem; font-size: 0.85rem;}
             /* Disable scroll reveal on smaller devices if preferred */
             /*
             .reveal-on-scroll {
                 opacity: 1;
                 transform: none;
                 transition: none;
             }
             */
        }
         @media (max-width: 480px) {
            .hero-title { font-size: 1.7rem; }
         }

    </style>
</head>
<body>

    <!-- Flash messages -->
    <div class="flash-messages">
        <!-- ... flash message code ... -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    {% set category_class = category if category in ['success', 'error', 'info'] else 'info' %}
                    <div class="flash-message {{ category_class }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

    <!-- Navbar -->
    <nav class="navbar" id="navbar">
        <a href="/" style="text-decoration: none;"><div class="logo">Health Station</div></a>
        <div class="nav-actions">
             <button class="btn btn-outline-primary" onclick="window.location.href='/doctor-login'">Doctor Login</button>
             <button class="btn btn-primary" onclick="window.location.href='/patient-login'">Patient Login / Sign Up</button>
        </div>
    </nav>

    <!-- Hero Section with Search -->
    <section class="hero-section" id="search-section"> <!-- Add ID for linking -->
        <h1 class="hero-title">Find & Book Your Doctor Easily</h1>
        <p class="hero-subtitle">Search by location, specialty, or doctor's name to find the right care for you.</p>

        <div class="typing-effect-container">
           <span id="text"></span>
        </div>

        <div class="search-container">
             <form class="search-form" id="searchForm" onsubmit="event.preventDefault(); searchDoctors();">
                 <div class="input-group">
                     <i class="fas fa-map-marker-alt"></i>
                     <select id="province">
                        <!-- Options -->
                        <option value="">All Provinces</option>
                        <option value="Province 1">Province 1</option>
                        <option value="Province 2">Province 2</option>
                        <option value="Province 3">Province 3</option>
                        <option value="Bagmati">Bagmati</option>
                     </select>
                     <!-- Icon is here in HTML, but style needs adjustment (like focus-within) or JS -->
                 </div>

                 <div class="input-group">
                     <i class="fas fa-stethoscope"></i>
                     <select id="specialization">
                        <!-- Options -->
                        <option value="">All Specialties</option>
                        <option value="Cardiology">Cardiology</option>
                        <option value="Dermatology">Dermatology</option>
                        <option value="Pediatrics">Pediatrics</option>
                        <option value="Orthopedics">Orthopedics</option>
                     </select>
                 </div>

                 <div class="input-group">
                     <i class="fas fa-user-md"></i>
                     <input type="text" id="doctorName" placeholder="Doctor's Name">
                 </div>

                 <button type="button" class="btn btn-primary search-btn" onclick="searchDoctors()">
                     <i class="fas fa-search"></i> Search
                 </button>
             </form>
        </div>
    </section>

    <!-- Doctors Results Section -->
    <section class="doctors-section">
        <div class="doctors-grid" id="resultsContainer">
             <!-- Doctor cards loop (apply reveal class here) -->
             {% for doctor in doctors %}
             <div class="doctor-card reveal-on-scroll"> <!-- Add helper class -->
                 <img src="{{ doctor.photo or 'https://via.placeholder.com/300x200/f8f9fa/6c757d?text=No+Photo' }}" class="doctor-photo" alt="{{ doctor.name }}">
                 <div class="doctor-info">
                     <h3>{{ doctor.name | default('Dr. Available') }}</h3>
                     <p class="specialization">{{ doctor.specialization | default('General Practice') }}</p>
                     <div class="doctor-details">
                         <p><i class="fas fa-star"></i> Rating: {{ doctor.rate if doctor.rate is not none else 'N/A' }}</p>
                         <p><i class="fas fa-map-marker-alt"></i> {{ doctor.province | default('Location N/A') }}</p>
                         {% if doctor.clinic_name %}<p><i class="fas fa-clinic-medical"></i> {{ doctor.clinic_name }}</p>{% endif %}
                     </div>
                     <div class="availability">
                         <p><strong>Availability:</strong> {{ doctor.availability1shortform | default('Click to view') }}</p>
                     </div>
                     <button class="btn btn-primary book-btn" onclick="window.location.href='/booking/{{ doctor.id }}'">Book Appointment</button>
                 </div>
             </div>
             {% else %}
                 {# This content won't show if JS runs on load and finds no doctors #}
             {% endfor %}
        </div>
        <div id="noResultsMessage">
            <p>No doctors found matching your criteria. Please adjust your search filters.</p>
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <!-- Add reveal-on-scroll to each footer section -->
            <div class="footer-section reveal-on-scroll">
                 <h3>Health Station</h3>
                 <p style="font-size: 0.9rem;">Connecting you with trusted healthcare professionals. Book your appointment today.</p>
            </div>
            <div class="footer-section reveal-on-scroll">
                <h3>Quick Links</h3>
                <div class="footer-links">
                    <a href="/">Home</a>
                    <a href="#search-section">Find Doctors</a> <!-- Link to hero search -->
                    <a href="/patient-login">Patient Portal</a>
                    <a href="/doctor-login">Doctor Portal</a>
                    <a href="#">About Us</a>
                    <a href="#">Contact</a>
                </div>
            </div>
             <div class="footer-section reveal-on-scroll">
                <h3>Follow Us</h3>
                <div class="social-links">
                    <a href="#" aria-label="Facebook"><i class="fab fa-facebook-f"></i></a>
                    <a href="#" aria-label="Twitter"><i class="fab fa-twitter"></i></a>
                    <a href="#" aria-label="Instagram"><i class="fab fa-instagram"></i></a>
                    <a href="#" aria-label="LinkedIn"><i class="fab fa-linkedin-in"></i></a>
                </div>
            </div>
             <div class="footer-section reveal-on-scroll">
                 <h3>Legal</h3>
                 <div class="footer-links">
                     <a href="#">Privacy Policy</a>
                     <a href="#">Terms of Service</a>
                 </div>
             </div>
        </div>
        <div class="copyright">
            © <span id="copyright-year"></span> Health Station. All Rights Reserved.
        </div>
    </footer>

    <script>
        // --- Navbar Scroll Effect ---
        window.addEventListener('scroll', () => {
            const navbar = document.getElementById('navbar');
            // Adjust scroll threshold slightly if needed with padding change
            if (window.scrollY > 50) {
                navbar.classList.add('scrolled');
            } else {
                navbar.classList.remove('scrolled');
            }
        });

        // --- Copyright Year ---
        document.getElementById('copyright-year').textContent = new Date().getFullYear();

        // --- Doctor Search/Filter Logic (Unchanged) ---
        const allDoctors = JSON.parse('{{ doctors | tojson | safe }}');
        function searchDoctors() {
             // ... existing search logic ...
            const province = document.getElementById('province').value;
            const specialization = document.getElementById('specialization').value;
            const nameQuery = document.getElementById('doctorName').value.toLowerCase().trim();
            const resultsContainer = document.getElementById('resultsContainer');
            const noResultsMessage = document.getElementById('noResultsMessage');

            const filteredDoctors = allDoctors.filter(doctor => {
                const doctorProvince = doctor.province || '';
                const doctorSpecialization = doctor.specialization || '';
                const doctorName = doctor.name || '';
                const provinceMatch = !province || doctorProvince === province;
                const specMatch = !specialization || doctorSpecialization === specialization;
                const nameMatch = !nameQuery || doctorName.toLowerCase().includes(nameQuery);
                return provinceMatch && specMatch && nameMatch;
            });
            // Pass the container for reveal-on-scroll setup
            displayResults(filteredDoctors, resultsContainer, noResultsMessage);
        }

        function displayResults(doctors, container, noResultsEl) {
            container.innerHTML = ''; // Clear previous results

            if (doctors.length === 0) {
                noResultsEl.style.display = 'block';
            } else {
                noResultsEl.style.display = 'none';
                doctors.forEach((doctor, index) => { // Add index for stagger
                    const card = document.createElement('div');
                    card.className = 'doctor-card reveal-on-scroll'; // Add reveal class here too!
                    const photoUrl = doctor.photo || 'https://via.placeholder.com/300x200/f8f9fa/6c757d?text=No+Photo';
                    const rating = doctor.rate !== undefined && doctor.rate !== null ? doctor.rate : 'N/A';
                    const province = doctor.province || 'Location N/A';
                    const availability = doctor.availability1shortform || 'Click to view';
                    const name = doctor.name || 'Dr. Available';
                    const specialization = doctor.specialization || 'General Practice';

                    card.innerHTML = `
                        <img src="${photoUrl}" class="doctor-photo" alt="${name}">
                        <div class="doctor-info">
                            <h3>${name}</h3>
                            <p class="specialization">${specialization}</p>
                            <div class="doctor-details">
                               <p><i class="fas fa-star"></i> Rating: ${rating}</p>
                               <p><i class="fas fa-map-marker-alt"></i> ${province}</p>
                               ${doctor.clinic_name ? `<p><i class="fas fa-clinic-medical"></i> ${doctor.clinic_name}</p>` : ''}
                            </div>
                            <div class="availability">
                                <p><strong>Availability:</strong> ${availability}</p>
                            </div>
                            <button class="btn btn-primary book-btn" onclick="window.location.href='/booking/${doctor.id}'">Book Appointment</button>
                        </div>
                    `;
                     // Add staggered delay directly via JS for dynamic content
                     card.style.transitionDelay = `${index * 0.08}s`; // Stagger effect
                    container.appendChild(card);
                });

                // IMPORTANT: After adding dynamic elements, re-initialize the observer for them
                 setupScrollObserver();
            }
        }


        // --- Typing Effect (Unchanged) ---
        const textElement = document.getElementById("text");
        const textsToType = [
             "Book appointments in minutes.",
             "Find trusted specialists near you.",
             "Check real-time availability.",
             "Your health is our priority."
         ];
         let textIndex = 0;
         let charIndex = 0;
         let isDeleting = false;
         const typingSpeed = 100;
         const deletingSpeed = 50;
         const pauseBeforeDelete = 1800;
         const pauseBeforeType = 500;
         function type() { /* ... existing typing logic ... */
             if (!textElement) return;
             const currentText = textsToType[textIndex];
             let typeDelay;
             if (!isDeleting) {
                 textElement.textContent = currentText.slice(0, charIndex + 1); charIndex++;
                 if (charIndex === currentText.length) { isDeleting = true; typeDelay = pauseBeforeDelete; }
                 else { typeDelay = typingSpeed; }
             } else {
                 textElement.textContent = currentText.slice(0, charIndex - 1); charIndex--;
                 if (charIndex === 0) { isDeleting = false; textIndex = (textIndex + 1) % textsToType.length; typeDelay = pauseBeforeType; }
                 else { typeDelay = deletingSpeed; }
             }
             setTimeout(type, typeDelay);
        }

        // --- Intersection Observer for Scroll Effects ---
        let observer; // Declare observer globally to reuse/disconnect if needed

        function setupScrollObserver() {
             // Disconnect previous observer if exists (important for re-filtering)
             if (observer) {
                 observer.disconnect();
             }

            const scrollElements = document.querySelectorAll(".reveal-on-scroll");

            const observerOptions = {
                root: null, // relative to the viewport
                rootMargin: '0px',
                threshold: 0.1 // Trigger when 10% of the element is visible
            };

            const observerCallback = (entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add("is-visible");
                        observer.unobserve(entry.target); // Stop observing once visible
                    }
                     // Optional: else { entry.target.classList.remove("is-visible"); } // Re-animate if scrolling up
                });
            };

            observer = new IntersectionObserver(observerCallback, observerOptions);

            scrollElements.forEach((el, index) => {
                // Apply staggered delay for non-card elements if needed, or rely on card logic
                if (!el.classList.contains('doctor-card')) {
                    // Check if it's a footer section for staggering
                     if (el.classList.contains('footer-section')) {
                        el.style.transitionDelay = `${index * 0.1}s`;
                     }
                }
                observer.observe(el);
            });
        }


        // --- Initial Setup ---
        document.addEventListener('DOMContentLoaded', () => {
             displayResults(allDoctors, document.getElementById('resultsContainer'), document.getElementById('noResultsMessage'));
             if (textElement) { setTimeout(type, pauseBeforeType + 500); } // Slightly delay typing start
             setupScrollObserver(); // Initial observer setup for elements loaded with the page (footer etc.)
        });

    </script>
</body>
</html>

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

doctors.json:

{
    "doctors": [
        {
            "id": 1,
            "name": "Dr.1",
            "availability1shortform": "Monday-Thursday: 7:00-8:00, Friday-Sunday: 8:00-9:00",
            "province": "1",
            "rate":"3.5",
            "plc":"hos",
            "specialization": "Dermatology",
            "photo": "/static/doctors/doctor1.jpg",
            "description": "Expert in cosmetic and medical dermatology with 8 years of practice.",
            "availability": {
                "Monday": ["7:00-7:20", "7:20-7:40", "7:40-8:00"],
                "Tuesday": ["7:00-7:20", "7:20-7:40", "7:40-8:00"],
                "Wednesday": ["7:00-7:20am", "7:20-7:40", "7:40-8:00"],
                "Thursday": ["Unavilable"],
                "Friday": ["Unavilable"],
                "Saturday": ["8:00-8:20", "8:20-8:40", "8:40-9:00am", "9:00-9:20", "9:20-9:40", "9:40-10:00", "10:00-10:20", "10:20-10:40", "10:40-11:00"],
                "Sunday": ["8:00-8:20", "8:20-8:40", "8:40-9:00"]
            }
            
        },
        {
            "id": 2,
            "name": "DR.2",
            "availability1shortform": "Monday-Thursday: 7:00-8:00, Friday-Sunday: 8:00-9:00",
            "rate":"3.5",
            "province": "2",
            "specialization": "Cardiology",
            "photo": "/static/doctors/doctor3.jpg",
            "description": "Expert in cosmetic and medical dermatology with 8 years of practice.",
            "availability": {
                "Monday": ["7:00-7:20", "7:20-7:40", "7:40-8:00"],
                "Tuesday": ["7:00-7:20", "7:20-7:40", "7:40-8:00"],
                "Wednesday": ["7:00-7:20am", "7:20-7:40", "7:40-8:00"],
                "Thursday": ["Unavilable"],
                "Friday": ["Unavilable"],
                "Saturday": ["8:00-8:20", "8:20-8:40", "8:40-9:00am", "9:00-9:20", "9:20-9:40", "9:40-10:00", "10:00-10:20", "10:20-10:40", "10:40-11:00"],
                "Sunday": ["8:00-8:20", "8:20-8:40", "8:40-9:00"]
            }
            
        },
        {
            "id": 3,
            "name": "DR.3",
            "availability1shortform": "Monday-Thursday: 7:00-8:00, Friday-Sunday: 8:00-9:00",
            "rate":"3.5",
            "province": "3",
            "specialization": "Cardiology",
            "photo": "/static/doctors/doctor4.jpg",
            "description": "Expert in cosmetic and medical dermatology with 8 years of practice.",
            "availability": {
                "Monday": ["7:00-7:20", "7:20-7:40", "7:40-8:00"],
                "Tuesday": ["7:00-7:20", "7:20-7:40", "7:40-8:00"],
                "Wednesday": ["7:00-7:20am", "7:20-7:40", "7:40-8:00"],
                "Thursday": ["Unavilable"],
                "Friday": ["Unavilable"],
                "Saturday": ["8:00-8:20", "8:20-8:40", "8:40-9:00am", "9:00-9:20", "9:20-9:40", "9:40-10:00", "10:00-10:20", "10:20-10:40", "10:40-11:00"],
                "Sunday": ["8:00-8:20", "8:20-8:40", "8:40-9:00"]
            }
            
        },
        {
            "id": 4,
            "name": "DR.4",
            "rate":"3.5",
            "specialization": "Cardiology",
            "province": "4",
            "availability1shortform": "Monday-Thursday: 9:00-10:30, Friday-Sunday: 11:00-12:30",
            "photo": "/static/doctors/doctor2.jpg",
            "description": "Board-certified cardiologist with 10+ years experience.",
            "availability": {
                "Monday": ["7:10-7:30", "9:30-10:00", "10:00-10:30"],
                "Tuesday": ["9:00-9:30", "9:30-10:00", "10:00-10:30"],
                "Wednesday": ["Unavilable"],
                "Thursday": ["Unavilable"],
                "Friday": ["11:00-11:30", "11:30-12:00", "12:00-12:30"],
                "Saturday": ["11:00-11:30", "11:30-12:00", "12:00-12:30"],
                "Sunday": ["11:00-11:30", "11:30-12:00", "12:00-12:30"]
            }
        }
    ]
}

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

booking.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Book Appointment</title>
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Clinic Style Palette */
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --border-color: #dee2e6;
            --border-color-focus: #80bdff;
            --text-dark: #343a40;
            --text-medium: #6c757d;
            --text-light: #ffffff;
            --accent: #007bff;
            --accent-hover: #0056b3;
            --accent-selected: #004085; /* Darker blue for selected */
            --accent-disabled: #a0cfff; /* Lighter blue for disabled look */
            --success: #28a745;
            --error: #dc3545;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --transition-speed: 0.2s; /* Faster transition */
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            background: var(--bg-secondary);
            color: var(--text-dark);
            font-family: 'Open Sans', 'Lato', sans-serif;
            padding: 2rem;
            line-height: 1.6; /* Added base line-height */
        }

        .booking-container {
            max-width: 700px;
            margin: 2rem auto;
            padding: 2rem;
            background: var(--bg-primary);
            border-radius: 0.5rem;
            box-shadow: 0 4px 15px var(--shadow-color);
            border: 1px solid var(--border-color);
        }

        .page-header { text-align: center; margin-bottom: 2rem; }
        .page-header h1 { color: var(--accent); font-family: 'Lato', sans-serif; font-size: 1.8rem; }

        .doctor-details-section { display: flex; gap: 1.5rem; margin-bottom: 2rem; padding: 1.5rem; background: var(--bg-secondary); border-radius: 0.4rem; border: 1px solid var(--border-color); align-items: flex-start; /* Align items top */ }
        .doctor-photo { width: 150px; height: 150px; object-fit: cover; border-radius: 0.4rem; border: 3px solid var(--accent); flex-shrink: 0; }
        .doctor-text-info h2 { color: var(--text-dark); font-weight: 700; margin-bottom: 0.3rem; font-size: 1.4rem; }
        .doctor-text-info .specialization { color: var(--accent); font-weight: 600; margin-bottom: 0.6rem; font-size: 1rem; }
        .doctor-text-info p { color: var(--text-medium); font-size: 0.9rem; margin-bottom: 0.5rem; }

        .booking-form-section h2 { font-size: 1.5rem; color: var(--accent); margin-bottom: 1.5rem; padding-bottom: 0.5rem; border-bottom: 1px solid var(--border-color); }
        .booking-form { display: grid; gap: 1.5rem; /* Increased gap slightly */ }
        .form-group { display: flex; flex-direction: column; gap: 0.4rem; /* Increased gap */ }
        label { font-weight: 600; color: var(--text-dark); font-size: 0.9rem; }
        input[type="text"], input[type="tel"], /* Changed type to tel */ input[type="date"], textarea /* Added textarea */ { width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.3rem; background: var(--bg-primary); color: var(--text-dark); font-size: 0.95rem; transition: border-color var(--transition-speed) ease, box-shadow var(--transition-speed) ease; }
        input[type="text"]:focus, input[type="tel"]:focus, input[type="date"]:focus, textarea:focus { outline: none; border-color: var(--border-color-focus); box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }
        textarea { min-height: 80px; resize: vertical; /* Allow vertical resize */ }

        /* Time Slot Card Styles - NEW */
        .time-slots-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); /* Responsive grid */
            gap: 0.8rem;
            margin-top: 0.5rem; /* Space above cards */
            padding: 0.5rem;
            background-color: var(--bg-secondary); /* Light bg for contrast */
            border: 1px solid var(--border-color);
            border-radius: 0.3rem;
            min-height: 50px; /* Ensure container has some height */
        }
        .slot-card {
            padding: 0.7rem 0.5rem; /* Adjusted padding */
            border: 1px solid var(--border-color);
            border-radius: 0.3rem;
            background-color: var(--bg-primary);
            color: var(--text-dark);
            font-weight: 600;
            text-align: center;
            cursor: pointer;
            transition: all var(--transition-speed) ease;
            font-size: 0.9rem; /* Slightly smaller text */
        }
        .slot-card:hover {
            border-color: var(--accent);
            background-color: #e7f3ff; /* Light blue hover */
            transform: translateY(-2px);
        }
        .slot-card.selected {
            background-color: var(--accent-selected);
            color: var(--text-light);
            border-color: var(--accent-selected);
            font-weight: 700;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        .slot-card.disabled { /* Style for when fetching/no slots */
            background-color: #e9ecef;
            color: var(--text-medium);
            cursor: not-allowed;
            border-color: var(--border-color);
        }
        .slots-message { /* Message for loading/no slots */
            grid-column: 1 / -1; /* Span full width */
            text-align: center;
            padding: 1rem;
            color: var(--text-medium);
            font-style: italic;
        }

        /* Base Button Style */
        .btn { padding: 0.8rem 1.5rem; /* Slightly more padding */ border-radius: 0.3rem; cursor: pointer; font-weight: 600; font-size: 1rem; text-align: center; transition: all var(--transition-speed) ease-in-out; border: 1px solid transparent; text-decoration: none; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; }
        .btn:hover:not(:disabled) { transform: translateY(-2px); box-shadow: 0 3px 10px rgba(0,0,0,0.1); }
        .btn:disabled { background-color: var(--accent-disabled); border-color: var(--accent-disabled); cursor: not-allowed; }
        .btn-primary { background-color: var(--accent); color: var(--text-light); border-color: var(--accent); }
        .btn-primary:hover:not(:disabled) { background-color: var(--accent-hover); border-color: var(--accent-hover); }
        .btn-block { width: 100%; }
        .btn-outline-primary { background-color: transparent; color: var(--accent); border-color: var(--accent); }
        .btn-outline-primary:hover { background-color: var(--accent); color: var(--text-light); }

        /* Flash Messages */
        .flash-messages { position: fixed; top: 20px; right: 20px; z-index: 1050; width: clamp(280px, 90%, 400px); }
        .flash-message { padding: 0.8rem 1.2rem; margin-bottom: 1rem; border-radius: 0.3rem; font-weight: 500; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); opacity: 0; transform: translateX(100%); animation: slideInFadeOut 5s ease-in-out forwards; border: 1px solid transparent; }
        .flash-message.success { background-color: #d4edda; border-color: #c3e6cb; color: #155724; }
        .flash-message.error { background-color: #f8d7da; border-color: #f5c6cb; color: #721c24; }
        .flash-message.info { background-color: #d1ecf1; border-color: #bee5eb; color: #0c5460; }
        @keyframes slideInFadeOut { 0% { opacity: 0; transform: translateX(100%); } 10% { opacity: 1; transform: translateX(0); } 90% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; transform: translateX(100%); } }

        @media (max-width: 768px) {
            body { padding: 1rem; }
            .booking-container { padding: 1.5rem; margin: 1rem auto; }
            .doctor-details-section { flex-direction: column; align-items: center; text-align: center; }
            .doctor-photo { width: 120px; height: 120px; margin-bottom: 1rem; }
            .page-header h1 { font-size: 1.6rem;}
            .booking-form-section h2 { font-size: 1.3rem;}
            .time-slots-container { grid-template-columns: repeat(auto-fill, minmax(85px, 1fr)); /* Smaller cards on mobile */ gap: 0.5rem; }
            .slot-card { padding: 0.6rem 0.4rem; font-size: 0.85rem; }
        }
    </style>
    </head>
<body>
    <div class="flash-messages">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    {% set category_class = category if category in ['success', 'error', 'info'] else 'info' %}
                    <div class="flash-message {{ category_class }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

    <div class="booking-container">
        <div class="page-header">
             <h1>Book Your Appointment</h1>
        </div>

        <div class="doctor-details-section">
            <img src="{{ doctor.photo or 'https://via.placeholder.com/150/dee2e6/6c757d?text=Photo' }}" class="doctor-photo" alt="{{ doctor.name }}">
            <div class="doctor-text-info">
                <h2>Dr. {{ doctor.name | default('N/A') }}</h2>
                <p class="specialization">{{ doctor.specialization | default('General Practice') }}</p>
                <p>{{ doctor.province | default('Location N/A') }}</p>
                <p>{{ doctor.description | default('No description available.') }}</p>
            </div>
        </div>

        <div class="booking-form-section">
            <h2>Fill in Your Details</h2>
            <form id="booking-form" class="booking-form" method="POST" action="{{ url_for('confirm_booking') }}"> <input type="hidden" name="doctor_id" value="{{ doctor.id }}">
                <input type="hidden" name="doctor_name" value="{{ doctor.name }}">
                <input type="hidden" name="fingerprint" id="fingerprint-input">
                <input type="hidden" name="booking_time" id="selectedTimeInput" required>

                <div class="form-group">
                    <label for="bookingDate">Select Date:</label>
                    <input type="date" id="bookingDate" name="booking_date" required min="{{ today }}">
                </div>

                <div class="form-group">
                    <label for="timeSlotsContainer">Available Time Slots:</label>
                    <div id="timeSlotsContainer" class="time-slots-container">
                        <div class="slots-message">Please select a date to see available times.</div>
                    </div>
                    </div>

                <div class="form-group">
                    <label for="patientName">Full Name:</label>
                    <input type="text" id="patientName" name="patient_name" required autocomplete="name">
                </div>

                <div class="form-group">
                    <label for="patientPhone">Phone Number:</label>
                    <input type="tel" id="patientPhone" name="patient_phone" required pattern="[0-9]{9,15}" title="Please enter a valid phone number (9-15 digits)" autocomplete="tel">
                </div>

                <div class="form-group">
                    <label for="notes">Notes (Optional):</label>
                    <textarea id="notes" name="notes" placeholder="Any specific information for the doctor?"></textarea>
                </div>

                <button type="submit" id="confirmButton" class="btn btn-primary btn-block" disabled>Select Date & Time</button>
            </form>
             <div style="text-align: center; margin-top: 1.5rem;">
                 <a href="{{ url_for('home') }}" class="btn btn-outline-primary"> Back to Home
                 </a>
             </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const dateInput = document.getElementById('bookingDate');
        const timeSlotsContainer = document.getElementById('timeSlotsContainer');
        const selectedTimeInput = document.getElementById('selectedTimeInput');
        const confirmButton = document.getElementById('confirmButton');
        const doctorId = "{{ doctor.id }}"; // Get doctor ID from template

        // Set min date
        const today = new Date().toISOString().split('T')[0];
        dateInput.setAttribute('min', today);

        // --- FUNCTION TO FETCH AND DISPLAY SLOTS ---
        async function updateTimeSlots() {
            const selectedDate = dateInput.value;
            selectedTimeInput.value = ''; // Reset selected time
            confirmButton.disabled = true; // Disable button until time selected
            confirmButton.textContent = 'Select Date & Time'; // Reset button text
            timeSlotsContainer.innerHTML = '<div class="slots-message">Loading available slots...</div>'; // Show loading message

            if (!selectedDate) {
                timeSlotsContainer.innerHTML = '<div class="slots-message">Please select a date to see available times.</div>';
                return;
            }

            try {
                // Fetch available slots from the new endpoint
                const response = await fetch(`/get-available-slots/${doctorId}/${selectedDate}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const availableSlots = await response.json();

                timeSlotsContainer.innerHTML = ''; // Clear previous content

                if (availableSlots.length === 0) {
                    timeSlotsContainer.innerHTML = '<div class="slots-message">No available slots for this date.</div>';
                } else {
                    availableSlots.forEach(time => {
                        const slotButton = document.createElement('button');
                        slotButton.type = 'button'; // Important: prevent form submission
                        slotButton.classList.add('slot-card');
                        slotButton.textContent = time;
                        slotButton.dataset.time = time; // Store time in data attribute

                        slotButton.addEventListener('click', () => {
                            // Remove 'selected' class from all buttons
                            document.querySelectorAll('.slot-card.selected').forEach(btn => {
                                btn.classList.remove('selected');
                            });
                            // Add 'selected' class to the clicked button
                            slotButton.classList.add('selected');
                            // Update the hidden input value
                            selectedTimeInput.value = time;
                            // Enable confirm button
                            confirmButton.disabled = false;
                            confirmButton.textContent = 'Confirm Booking';
                        });

                        timeSlotsContainer.appendChild(slotButton);
                    });
                }
            } catch (error) {
                console.error('Error fetching available slots:', error);
                timeSlotsContainer.innerHTML = '<div class="slots-message" style="color: var(--error);">Error loading slots. Please try again.</div>';
            }
        }

        // --- Flash Message Handling ---
        function hideFlashMessages() {
            const flashMessages = document.querySelectorAll('.flash-message');
            flashMessages.forEach(message => {
                // Start fade out after 4 seconds
                setTimeout(() => {
                    message.style.opacity = '0';
                    // Remove from DOM after transition ends (500ms)
                    setTimeout(() => message.remove(), 500);
                }, 4000);
            });
        }

        // --- Event Listeners ---
        dateInput.addEventListener('change', updateTimeSlots);

        // --- Initial Load ---
        window.onload = () => {
             hideFlashMessages();
             // Don't call updateTimeSlots initially
         };

        // --- FingerprintJS Logic (unchanged) ---
        // Ensure this runs after the rest of the DOM is potentially ready
        document.addEventListener('DOMContentLoaded', () => {
            if (typeof FingerprintJS === 'undefined') {
                 console.warn('FingerprintJS library not loaded.');
                 return;
            }
            FingerprintJS.load().then(fp => fp.get()).then(result => {
                const fingerprint = result.visitorId;
                const fpInput = document.getElementById('fingerprint-input');
                 if (fpInput) {
                     fpInput.value = fingerprint;
                 } else {
                    console.warn('Fingerprint input field not found.');
                 }
            }).catch(error => {
                console.error('Error getting fingerprint:', error);
            });
        });

    </script>

    <script src="https://cdn.jsdelivr.net/npm/@fingerprintjs/fingerprintjs@3/dist/fp.min.js" defer></script> </body>
</html>
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

confirmation.html:

<!DOCTYPE html>
<html lang="en"> <!-- Set lang -->
<head>
    <meta charset="UTF-8"> <!-- Use meta charset -->
    <title>Booking Confirmation</title>
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"> <!-- FontAwesome -->
    <style>
        :root {
            /* Clinic Style Palette */
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --border-color: #dee2e6;
            --text-dark: #343a40;
            --text-medium: #6c757d;
            --text-light: #ffffff;
            --accent: #007bff;
            --accent-hover: #0056b3;
            --success: #28a745;
            --success-bg: #d4edda;
            --error: #dc3545;
            --error-hover: #c82333;
            --error-bg: #f8d7da;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --transition-speed: 0.3s;
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            background-color: var(--bg-secondary);
            color: var(--text-dark);
            font-family: 'Open Sans', 'Lato', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1.5rem;
        }

        .confirmation-container {
            background: var(--bg-primary);
            border-radius: 0.5rem;
            box-shadow: 0 5px 20px var(--shadow-color);
            padding: 2rem 2.5rem;
            max-width: 550px;
            width: 100%;
            border: 1px solid var(--border-color);
            text-align: center; /* Center align container content */
            animation: fadeIn 0.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .confirmation-icon {
            font-size: 3rem;
            color: var(--success);
            margin-bottom: 1rem;
            display: block; /* Center icon */
        }

        h1 {
            text-align: center;
            color: var(--text-dark);
            margin-bottom: 1.5rem;
            font-family: 'Lato', sans-serif;
            font-size: 1.8rem;
            font-weight: 700;
        }

        .confirmation-details {
            background: var(--bg-secondary);
            border-radius: 0.4rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            text-align: left; /* Align text left inside details box */
            border: 1px solid var(--border-color);
        }

        .confirmation-details h2 {
            margin-top: 0;
            margin-bottom: 1rem;
            color: var(--accent);
            font-size: 1.2rem;
            font-weight: 600;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 0.5rem;
        }

        .confirmation-details p {
            margin: 0.6rem 0;
            line-height: 1.6;
            font-size: 0.95rem;
            color: var(--text-medium);
        }

        .confirmation-details p strong {
            color: var(--text-dark);
            font-weight: 600;
            min-width: 100px; /* Align keys */
            display: inline-block;
        }

        /* --- Button Styles --- */
         .btn { /* Copied from booking page for consistency */
             padding: 0.7rem 1.5rem; border-radius: 0.3rem; cursor: pointer;
             font-weight: 600; font-size: 0.95rem; text-align: center;
             transition: all var(--transition-speed) ease-in-out;
             border: 1px solid transparent; text-decoration: none;
             display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem;
             margin: 0.5rem 0.2rem; /* Spacing between buttons */
         }
         .btn:hover { transform: translateY(-2px); box-shadow: 0 3px 10px rgba(0,0,0,0.1); }

         .btn-primary { background-color: var(--accent); color: var(--text-light); border-color: var(--accent); }
         .btn-primary:hover { background-color: var(--accent-hover); border-color: var(--accent-hover); }

         .btn-outline-primary { border-color: var(--accent); color: var(--accent); background: transparent;}
         .btn-outline-primary:hover { background-color: var(--accent); color: var(--text-light);}

         .btn-danger { background-color: var(--error); color: var(--text-light); border-color: var(--error); }
         .btn-danger:hover { background-color: var(--error-hover); border-color: var(--error-hover); }
         .btn-block { width: calc(100% - 0.4rem); /* Account for margin */ display: block; }


         /* Flash Messages - Light Theme (Same as booking page) */
         .flash-messages { position: fixed; top: 20px; right: 20px; z-index: 1050; width: clamp(280px, 90%, 400px); }
         .flash-message { /* ... Styles are the same ... */ padding: 0.8rem 1.2rem; margin-bottom: 1rem; border-radius: 0.3rem; font-weight: 500; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); opacity: 0; transform: translateX(100%); animation: slideInFadeOut 5s ease-in-out forwards; border: 1px solid transparent; }
         .flash-message.success { background-color: var(--success-bg); border-color: #c3e6cb; color: #155724; }
         .flash-message.error { background-color: var(--error-bg); border-color: #f5c6cb; color: #721c24; }
         .flash-message.info { background-color: #d1ecf1; border-color: #bee5eb; color: #0c5460; }
         @keyframes slideInFadeOut { /* ... Keyframes remain same ... */ 0% { opacity: 0; transform: translateX(100%); } 10% { opacity: 1; transform: translateX(0); } 90% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; transform: translateX(100%); } }


        @media (max-width: 600px) {
            body { padding: 1rem; }
            .confirmation-container { padding: 1.5rem; }
            h1 { font-size: 1.6rem; }
             .btn { font-size: 0.9rem; padding: 0.6rem 1.2rem; }
        }
    </style>
</head>
<body>
    <!-- Flash messages -->
    <div class="flash-messages">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    {# Default to 'info' if category is missing or not error/success #}
                    {% set category_class = category if category in ['success', 'error', 'info'] else 'info' %}
                    <div class="flash-message {{ category_class }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

    <div class="confirmation-container">
        <i class="fas fa-check-circle confirmation-icon"></i> <!-- Confirmation Icon -->
        <h1>Booking Confirmed!</h1>

        <div class="confirmation-details">
            <h2>Appointment Details</h2>
            <p><strong>Doctor:</strong> Dr. {{ doctor_name | default('N/A') }}</p>
            <p><strong>Patient:</strong> {{ patient_name | default('N/A') }}</p>
            <p><strong>Date:</strong> {{ booking_date | default('N/A') }}</p>
            <p><strong>Time:</strong> {{ booking_time | default('N/A') }}</p>
        </div>

        <p style="color: var(--text-medium); font-size: 0.9rem; margin-bottom: 1.5rem;">
            You will receive a confirmation reminder soon. Please contact us if you need to reschedule.
        </p>

        <div class="action-buttons">
             <!-- Delete Booking Button -->
             <form action="/delete-booking/{{ booking_id }}" method="POST" style="display: inline-block;">
                 <input type="hidden" name="source" value="confirmation">
                 <button type="submit" class="btn btn-danger">
                    <i class="fas fa-trash-alt" style="margin-right: 5px;"></i> Cancel Booking
                 </button>
             </form>

            <!-- Back to Home Button -->
            <button onclick="window.location.href='/'" class="btn btn-primary">
                 <i class="fas fa-home" style="margin-right: 5px;"></i> Back to Home
            </button>
        </div>
    </div>
     <script>
         // JS for flash messages
        function hideFlashMessages() { /* ... Same as booking page ... */
            const flashMessages = document.querySelectorAll('.flash-message');
            flashMessages.forEach(message => { setTimeout(() => { message.style.opacity = '0'; setTimeout(() => message.remove(), 500); }, 4000); });
        }
        window.onload = hideFlashMessages;
     </script>
</body>
</html>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

doctor_login.html:

<!DOCTYPE html>
<html lang="en"> <!-- Set lang -->
<head>
    <meta charset="UTF-8"> <!-- Set charset -->
    <title>Doctor Login</title>
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            /* Clinic Style Palette */
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --border-color: #dee2e6;
            --border-color-focus: #80bdff;
            --text-dark: #343a40;
            --text-medium: #6c757d;
            --text-light: #ffffff;
            --accent: #007bff;
            --accent-hover: #0056b3;
            --error: #dc3545;
            --error-bg: #f8d7da;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --transition-speed: 0.3s;
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            background-color: var(--bg-secondary);
            color: var(--text-dark);
            font-family: 'Open Sans', 'Lato', sans-serif;
            display: flex;
            flex-direction: column; /* Stack items vertically */
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
        }

        .logo-header { /* Optional logo/header */
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--accent);
            font-family: 'Lato', sans-serif;
        }

        .login-container {
            background: var(--bg-primary);
            padding: 2rem 2.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 5px 20px var(--shadow-color);
            border: 1px solid var(--border-color);
            text-align: center;
            max-width: 400px; /* Constrain width */
            width: 100%;
             animation: fadeIn 0.5s ease-out; /* Reuse fadeIn */
        }

        @keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }

        .login-container h1 {
            color: var(--accent);
            margin-bottom: 1.5rem;
            font-size: 1.6rem;
            font-weight: 700;
            font-family: 'Lato', sans-serif;
        }

        .input-group {
            margin-bottom: 1.2rem;
            text-align: left; /* Align labels left */
        }

        .input-group label {
            display: block;
            margin-bottom: 0.4rem;
            color: var(--text-dark);
            font-size: 0.9rem;
            font-weight: 600;
        }

        .input-group input {
            width: 100%; /* Full width input */
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 0.3rem;
            background: var(--bg-primary);
            color: var(--text-dark);
            font-size: 0.95rem;
             transition: border-color var(--transition-speed) ease, box-shadow var(--transition-speed) ease;
        }
        .input-group input:focus {
            outline: none;
            border-color: var(--border-color-focus);
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

         /* --- Button Styles (Copied) --- */
         .btn { padding: 0.7rem 1.5rem; border-radius: 0.3rem; cursor: pointer; font-weight: 600; font-size: 1rem; text-align: center; transition: all var(--transition-speed) ease-in-out; border: 1px solid transparent; text-decoration: none; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; margin: 0.5rem 0; }
         .btn:hover { transform: translateY(-2px); box-shadow: 0 3px 10px rgba(0,0,0,0.1); }
         .btn-primary { background-color: var(--accent); color: var(--text-light); border-color: var(--accent); }
         .btn-primary:hover { background-color: var(--accent-hover); border-color: var(--accent-hover); }
         .btn-outline-primary { border-color: var(--accent); color: var(--accent); background: transparent;}
         .btn-outline-primary:hover { background-color: var(--accent); color: var(--text-light);}
         .btn-block { width: 100%; }

        /* Flash Messages - Light Theme (Same) */
         .flash-messages { position: fixed; top: 20px; right: 20px; z-index: 1050; width: clamp(280px, 90%, 400px); }
         .flash-message { /* ... Styles are the same ... */ padding: 0.8rem 1.2rem; margin-bottom: 1rem; border-radius: 0.3rem; font-weight: 500; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); opacity: 0; transform: translateX(100%); animation: slideInFadeOut 5s ease-in-out forwards; border: 1px solid transparent; }
         .flash-message.success { background-color: #d4edda; border-color: #c3e6cb; color: #155724; }
         .flash-message.error { background-color: #f8d7da; border-color: #f5c6cb; color: #721c24; }
         .flash-message.info { background-color: #d1ecf1; border-color: #bee5eb; color: #0c5460; }
         @keyframes slideInFadeOut { /* ... Keyframes remain same ... */ 0% { opacity: 0; transform: translateX(100%); } 10% { opacity: 1; transform: translateX(0); } 90% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; transform: translateX(100%); } }


        .back-link { /* Style for Back to Home link */
             margin-top: 1.5rem;
             font-size: 0.9rem;
         }
        .back-link a {
            color: var(--accent);
            text-decoration: none;
            transition: color var(--transition-speed);
        }
        .back-link a:hover {
            color: var(--accent-hover);
            text-decoration: underline;
        }

        @media (max-width: 480px) {
             .login-container { padding: 1.5rem; }
             h1 { font-size: 1.4rem;}
         }
    </style>
</head>
<body>
    <!-- Flash messages -->
    <div class="flash-messages">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    {% set category_class = category if category in ['success', 'error', 'info'] else 'info' %}
                    <div class="flash-message {{ category_class }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

     <div class="logo-header">Health Station</div> <!-- Optional: Add Logo -->

    <div class="login-container">
        <h1>Doctor Portal Login</h1>
        <form action="/doctor-login" method="POST">
            <div class="input-group">
                <label for="doctorName">Doctor Name</label>
                <input type="text" id="doctorName" name="doctorName" required>
            </div>
            <div class="input-group">
                <label for="doctorId">Doctor ID</label>
                <!-- Consider changing type to password if ID is sensitive -->
                <input type="text" id="doctorId" name="doctorId" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>
        <div class="back-link">
            <a href="/"><i class="fas fa-arrow-left" style="margin-right: 5px;"></i> Back to Home</a>
        </div>
    </div>
    <script>
        // JS for flash messages (same as others)
        function hideFlashMessages() { /* ... */
            const flashMessages = document.querySelectorAll('.flash-message');
            flashMessages.forEach(message => { setTimeout(() => { message.style.opacity = '0'; setTimeout(() => message.remove(), 500); }, 4000); });
        }
        window.onload = hideFlashMessages;
    </script>
</body>
</html>
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

doctor_dashboard.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Doctor Dashboard - Simplified</title>
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <style>
        :root {
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --border-color: #dee2e6;
            --border-color-focus: #80bdff;
            --text-dark: #343a40;
            --text-medium: #6c757d;
            --text-light: #ffffff;
            --accent: #007bff;
            --accent-hover: #0056b3;
            --accent-light: #e6f2ff; /* Lighter accent for hover/backgrounds */
            --success: #28a745;
            --success-hover: #218838;
            --warning: #ffc107;
            --info: #17a2b8;
            --error: #dc3545;
            --error-bg: #f8d7da;
            --info-bg: #d1ecf1;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --transition-speed: 0.3s;
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            background-color: var(--bg-secondary);
            color: var(--text-dark);
            font-family: 'Open Sans', 'Lato', sans-serif;
            padding: 1.5rem;
            font-size: 0.95rem;
            line-height: 1.5;
        }

        .dashboard-wrapper {
             max-width: 1400px;
             margin: 0 auto;
             background: var(--bg-primary);
             padding: 2rem;
             border-radius: 0.5rem;
             border: 1px solid var(--border-color);
             box-shadow: 0 4px 15px var(--shadow-color);
         }

        h1 {
            color: var(--accent); margin-bottom: 1.5rem; padding-bottom: 0.75rem; border-bottom: 1px solid var(--border-color); font-size: 2rem; font-family: 'Lato', sans-serif; font-weight: 700; display: flex; align-items: center; gap: 0.75rem;
        }
        h1 i { font-size: 1.8rem; }

        /* Stats Section */
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 1.5rem; margin-bottom: 2rem; }
        .stat-card { background-color: var(--bg-primary); padding: 1.25rem; border-radius: 0.4rem; border: 1px solid var(--border-color); box-shadow: 0 2px 5px var(--shadow-color); display: flex; flex-direction: column; align-items: center; text-align: center; transition: transform var(--transition-speed), box-shadow var(--transition-speed); }
        .stat-card:hover { transform: translateY(-3px); box-shadow: 0 5px 12px rgba(0,0,0,0.12); }
        .stat-card .icon { font-size: 2rem; margin-bottom: 0.75rem; color: var(--accent); }
        .stat-card .value { font-size: 1.8rem; font-weight: 700; color: var(--text-dark); line-height: 1.2; }
        .stat-card .label { font-size: 0.9rem; color: var(--text-medium); margin-top: 0.25rem; }
        .stat-card.today .icon { color: var(--success); }
        .stat-card.week .icon { color: var(--info); }
        .stat-card.pending .icon { color: var(--warning); }

        /* Charts Section - Fix Applied */
        .charts-grid {
            display: grid;
            grid-template-columns: minmax(300px, 1fr); /* Single column */
            justify-content: center;
            gap: 1.5rem;
            margin-bottom: 2.5rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
        }
        .chart-container {
            background-color: var(--bg-primary);
            padding: 1.5rem;
            border-radius: 0.4rem;
            border: 1px solid var(--border-color);
            box-shadow: 0 2px 5px var(--shadow-color);
            /* --- FIX: Define aspect ratio --- */
            aspect-ratio: 2 / 1; /* Common ratio for bar charts, adjust 2/1 or 16/9 if needed */
            /* Optional: Set a max-height to prevent extreme vertical stretching on very narrow screens */
             /* max-height: 400px; */
            /* Ensure canvas can fill container height now */
            display: flex; /* Allow canvas to potentially grow */
            flex-direction: column;
        }
         .chart-container canvas {
            /* Ensure canvas doesn't overflow its container (important with aspect-ratio) */
             max-width: 100%;
             height: auto !important; /* Override any inline Chart.js height to respect aspect ratio */
         }

        .chart-container h3 { margin-bottom: 1rem; font-size: 1.1rem; color: var(--text-dark); font-weight: 600; text-align: center; }

        /* Filter/Action Bar */
        .controls-bar { background: var(--bg-secondary); padding: 1rem 1.5rem; border-radius: 0.4rem; margin-bottom: 2rem; display: flex; flex-wrap: wrap; align-items: center; gap: 1rem; border: 1px solid var(--border-color); }
        .controls-bar .filter-group { display: flex; align-items: center; gap: 0.5rem; flex-grow: 1; min-width: 250px; }
        .controls-bar label { font-weight: 600; color: var(--text-dark); font-size: 0.95rem; white-space: nowrap; }
        .controls-bar input[type="date"] { padding: 0.5rem 0.7rem; border: 1px solid var(--border-color); border-radius: 0.3rem; background: var(--bg-primary); color: var(--text-dark); font-size: 0.9rem; flex-grow: 1; transition: border-color var(--transition-speed) ease, box-shadow var(--transition-speed) ease; }
        .controls-bar input[type="date"]:focus { outline: none; border-color: var(--border-color-focus); box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }

        /* Buttons */
        .btn { padding: 0.7rem 1.2rem; border-radius: 0.3rem; cursor: pointer; font-weight: 600; font-size: 0.9rem; text-align: center; transition: all var(--transition-speed) ease-in-out; border: 1px solid transparent; text-decoration: none; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; }
        .btn:hover { transform: translateY(-2px); box-shadow: 0 3px 10px rgba(0,0,0,0.1); }
        .btn-primary { background-color: var(--accent); color: var(--text-light); border-color: var(--accent); }
        .btn-primary:hover { background-color: var(--accent-hover); border-color: var(--accent-hover); }
        .btn-outline-primary { border-color: var(--accent); color: var(--accent); background: transparent;}
        .btn-outline-primary:hover { background-color: var(--accent); color: var(--text-light);}
        .btn-success { background-color: var(--success); color: var(--text-light); border-color: var(--success); }
        .btn-success:hover { background-color: var(--success-hover); border-color: var(--success-hover); }
        .btn-controls { padding: 0.5rem 1rem; font-size: 0.85rem; margin: 0; }
        .btn-action { padding: 0.3rem 0.6rem; font-size: 0.75rem; margin-right: 0.3rem; line-height: 1; }
        .btn-action i { margin-right: 3px; }
        .btn-action-view { background-color: var(--info); color: var(--text-light); border-color: var(--info); }
        .btn-action-view:hover { background-color: #138496; border-color: #117a8b;}
        .btn-action-complete { background-color: var(--success); color: var(--text-light); border-color: var(--success); }
        .btn-action-complete:hover { background-color: var(--success-hover); border-color: var(--success-hover); }
        .btn:disabled { opacity: 0.65; cursor: not-allowed; transform: none; box-shadow: none;} /* Improve disabled style */

        /* Table Styling */
        .month-header { margin-top: 2rem; }
        .month-header h2 { color: var(--accent); font-size: 1.5rem; font-weight: 600; margin-bottom: 1rem; font-family: 'Lato', sans-serif; }
        .day-section { margin-bottom: 1.5rem; border: 1px solid var(--border-color); border-radius: 0.4rem; overflow: hidden; }
        .day-section h3 { color: var(--text-dark); background-color: var(--bg-secondary); padding: 0.8rem 1rem; font-size: 1.1rem; font-weight: 600; border-bottom: 1px solid var(--border-color); margin: 0; }

        table { width: 100%; border-collapse: collapse; background-color: var(--bg-primary); table-layout: fixed; /* Help stabilize columns */}
        th, td { padding: 0.8rem 1rem; border-bottom: 1px solid var(--border-color); text-align: left; vertical-align: middle; overflow-wrap: break-word; /* Prevent long notes breaking layout */ }
        td { color: var(--text-medium); }
        td:first-child { color: var(--text-dark); font-weight: 500; width: 25%; /* Example width */}
        td:nth-child(2) { width: 15%; /* Example width */}
        td:nth-child(3) { width: 10%; /* Example width */}
        /* Notes column can take remaining space */
        .notes-cell { width: auto; }
        .actions-cell { width: 130px; /* Fixed width for actions */}


        th { background: var(--bg-secondary); color: var(--text-dark); font-weight: 600; font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px; border-bottom-width: 2px; }
        tbody tr:nth-child(odd) { background-color: var(--bg-secondary); }
        tbody tr:not(.completed-appointment):hover { background-color: var(--accent-light); } /* Don't highlight completed rows on hover */

        .past-appointment td { color: var(--text-medium); opacity: 0.8; }
        .past-appointment .notes-cell { opacity: 0.9; }
        .completed-appointment { opacity: 0.65; /* Slightly increased opacity for readability */ }
        .completed-appointment td { color: var(--text-medium); background-color: var(--bg-secondary); /* Subtle background */ }

        .notes-cell { white-space: pre-wrap; min-width: 150px; /* Min width for notes */ line-height: 1.4; padding: 0.6rem 1rem; border: 1px dashed transparent; transition: background-color var(--transition-speed), border-color var(--transition-speed); color: var(--text-dark); outline-color: var(--accent); }
        .notes-cell[contenteditable="true"]:focus { background-color: #e0f7ff; border-color: var(--border-color-focus); }
        .notes-cell[contenteditable="false"] { background-color: transparent; /* Ensure non-editable look normal */ color: var(--text-medium); font-style: italic; }

        .actions-cell { white-space: nowrap; text-align: right; }


        /* Flash Messages */
        .flash-messages { position: fixed; top: 20px; right: 20px; z-index: 1050; width: clamp(280px, 90%, 400px); }
        .flash-message { padding: 0.8rem 1.2rem; margin-bottom: 1rem; border-radius: 0.3rem; font-weight: 500; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); opacity: 0; transform: translateX(100%); animation: slideInFadeOut 5s ease-in-out forwards; border: 1px solid transparent; }
        .flash-message.success { background-color: #d4edda; border-color: #c3e6cb; color: #155724; }
        .flash-message.error { background-color: #f8d7da; border-color: #f5c6cb; color: #721c24; }
        .flash-message.info { background-color: var(--info-bg); border-color: #bee5eb; color: #0c5460; }
        @keyframes slideInFadeOut { 0% { opacity: 0; transform: translateX(100%); } 10% { opacity: 1; transform: translateX(0); } 90% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; transform: translateX(100%); } }

        /* Responsive */
        @media (max-width: 992px) { /* No change needed for single chart */ }
        @media (max-width: 768px) { .controls-bar { flex-direction: column; align-items: stretch; } .controls-bar .filter-group { width: 100%;} .btn-controls { width: 100%; } body { padding: 0.5rem; } .dashboard-wrapper { padding: 1rem;} h1 { font-size: 1.6rem; } .stats-grid { grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 1rem; } .stat-card .value { font-size: 1.5rem; } .stat-card .icon { font-size: 1.8rem; } th, td { padding: 0.6rem 0.8rem; font-size: 0.85rem; } .actions-cell { min-width: auto; white-space: normal; text-align: left; width: auto;} .btn-action { margin-bottom: 0.3rem; } table { table-layout: auto; /* Allow table to adjust more freely on small screens */} td:first-child, td:nth-child(2), td:nth-child(3), .actions-cell { width: auto; /* Remove fixed widths */ } }
        @media (max-width: 576px) { h1 { font-size: 1.4rem; gap: 0.5rem;} h1 i { font-size: 1.3rem; } .stats-grid { grid-template-columns: 1fr 1fr; } .notes-cell { min-width: 80px; /* Adjust min width */} }

    </style>
</head>
<body>
    <!-- Flash messages -->
    <div class="flash-messages">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    {% set category_class = category if category in ['success', 'error', 'info'] else 'info' %}
                    <div class="flash-message {{ category_class }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

    <div class="dashboard-wrapper">
        <h1><i class="fas fa-tachometer-alt"></i> Doctor Dashboard</h1>

        <!-- Summary Stats -->
        <div class="stats-grid">
             <div class="stat-card today"><div class="icon"><i class="fas fa-calendar-day"></i></div><div class="value" id="stat-today-count">0</div><div class="label">Appointments Today</div></div>
             <div class="stat-card week"><div class="icon"><i class="fas fa-calendar-week"></i></div><div class="value" id="stat-week-count">0</div><div class="label">Appointments This Week</div></div>
             <div class="stat-card pending"><div class="icon"><i class="fas fa-clock"></i></div><div class="value" id="stat-pending-count">0</div><div class="label">Upcoming Pending</div></div>
             <div class="stat-card"><div class="icon"><i class="fas fa-user-friends"></i></div><div class="value" id="stat-patients-count">0</div><div class="label">Unique Patients (Upcoming This Month)</div></div>
        </div>

         <!-- Charts Section -->


        <!-- Controls Bar -->
        <div class="controls-bar">
             <div class="filter-group"><label for="datePicker"><i class="fas fa-calendar-alt"></i> Filter by Date:</label><input type="date" id="datePicker" onchange="filterBookingsByDate()"></div>
             <button class="btn btn-success btn-controls" onclick="showAllBookings()"><i class="fas fa-list"></i> Show All</button>
             <button class="btn btn-primary btn-controls" onclick="saveAllNotes()"><i class="fas fa-save"></i> Save All Notes</button>
             <button class="btn btn-outline-primary btn-controls" onclick="window.location.href='{{ url_for('home') }}'"><i class="fas fa-home"></i> Home</button>
        </div>

        <!-- Bookings Display -->
        {% for month_year, days in bookings_by_month.items() %}
        <div class="month-header" data-month="{{ month_year }}">
            <h2>{{ month_year }}</h2>
            {% for day, bookings in days.items() %}
            <div class="day-section" data-date="{{ day }}">
                <h3>Appointments for <span class="appointment-date-display"></span></h3>
                <table>
                    <thead>
                        <tr>
                            <th>Patient Name</th><th>Phone</th><th>Time</th><th>Notes</th><th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for booking in bookings %}
                        <tr data-time="{{ booking.booking_time | default('00:00') }}" class="{{ 'completed-appointment' if booking.status == 'Completed' else '' }}">
                            <td>{{ booking.patient_name | default('N/A') }}</td>
                            <td>{{ booking.patient_phone | default('N/A') }}</td>
                            <td>{{ booking.booking_time | default('N/A') }}</td>
                            <td class="notes-cell"
                                contenteditable="{{ 'true' if booking.status == 'Pending' else 'false' }}"
                                data-booking-id="{{ booking.id }}"
                                data-original-value="{{ booking.notes or '' }}">
                                {{ booking.notes or '' }}</td>
                            <td class="actions-cell">
                                <button class="btn btn-action btn-action-view" onclick="viewDetails({{ booking.id }})" title="View Details"><i class="fas fa-eye"></i> View</button>
                                <button class="btn btn-action btn-action-complete" onclick="markComplete({{ booking.id }})" {{ 'disabled' if booking.status == 'Completed' }} title="{{ 'Mark Done' if booking.status == 'Pending' else 'Completed' }}"><i class="fas fa-check"></i> {{ 'Done' if booking.status == 'Pending' else 'Completed' }}</button>
                            </td>
                        </tr>
                        {% endfor %}
                        {% if not bookings %}
                         <tr><td colspan="5" style="text-align:center; color: var(--text-medium); font-style:italic;">No bookings for this day.</td></tr>
                        {% endif %}
                    </tbody>
                </table>
            </div>
            {% endfor %}
        </div>
        {% else %}
          <p style="text-align: center; color: var(--text-medium); margin-top: 2rem; font-style: italic;">You have no bookings scheduled.</p>
        {% endfor %}
    </div> <!-- End dashboard-wrapper -->

    <script>
        const today = new Date();
        const todayString = today.toISOString().split('T')[0];

        let appointmentsChart = null; // Keep track of the chart instance

        // --- Backend Data Passed from Flask ---
        const statsData = {{ stats | tojson | safe }};
        const chartConfigDaily = {{ chart_config_daily | tojson | safe }};
        const doctorId = {{ doctor_id | tojson | safe }};

        // --- Helper Functions ---
        function formatDateForDisplay(dateString) {
            if (!dateString) return '';
            try {
                const dateObj = new Date(dateString + 'T00:00:00');
                if (isNaN(dateObj.getTime())) return dateString;
                return dateObj.toLocaleDateString(navigator.language || 'en-US', { weekday: 'short', month: 'long', day: 'numeric' });
            } catch (e) { return dateString; }
        }

        function markPastAppointments() {
            const now = new Date();
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();
            const todaySection = document.querySelector(`.day-section[data-date="${todayString}"]`);
            if (!todaySection) return;

            todaySection.querySelectorAll('tbody tr[data-time]').forEach(row => {
                if (row.classList.contains('completed-appointment')) { row.classList.remove('past-appointment'); return; }
                if (!row.dataset.time || !row.dataset.time.includes(':')) return;
                try {
                    const [hour, minute] = row.dataset.time.split(':').map(Number);
                    if (hour < currentHour || (hour === currentHour && minute < currentMinute)) { row.classList.add('past-appointment'); }
                    else { row.classList.remove('past-appointment'); }
                } catch (e) { console.error("Time parsing error:", row.dataset.time, e); }
            });
        }

        // --- Update Stats Display ---
        function updateStatsDisplay(stats) {
            stats = stats || {};
            document.getElementById('stat-today-count').textContent = stats.today_count ?? 0;
            document.getElementById('stat-week-count').textContent = stats.week_count ?? 0;
            document.getElementById('stat-pending-count').textContent = stats.pending_count ?? 0;
            document.getElementById('stat-patients-count').textContent = stats.unique_patients_this_month ?? 0;
        }

        // --- Chart Creation Function ---
        function createAppointmentsPerDayChart(config) {
             const canvas = document.getElementById('appointmentsPerDayChart');
             if (!canvas) { console.error("'appointmentsPerDayChart' canvas not found."); return; }
             const ctx = canvas.getContext('2d');

             // Check config data existence
             if (!config || !config.labels || !config.data) {
                 console.error("Daily chart config data missing or invalid.");
                 ctx.clearRect(0, 0, canvas.width, canvas.height); ctx.save(); ctx.textAlign = 'center'; ctx.textBaseline = 'middle'; ctx.fillStyle = 'var(--text-medium)'; ctx.font = '14px "Open Sans"'; ctx.fillText('Chart data unavailable', canvas.width / 2, canvas.height / 2); ctx.restore();
                 return;
             }

             // Destroy existing chart instance before creating new one
             if (appointmentsChart) {
                 appointmentsChart.destroy();
                 appointmentsChart = null; // Clear the variable
             }

             appointmentsChart = new Chart(ctx, {
                 type: 'bar',
                 data: { labels: config.labels, datasets: [{ label: 'Appointments', data: config.data, backgroundColor: 'rgba(0, 123, 255, 0.6)', borderColor: 'rgba(0, 123, 255, 1)', borderWidth: 1, borderRadius: 4 }] },
                 options: {
                     responsive: true,
                     maintainAspectRatio: false, // Keep false, container's aspect-ratio CSS handles shape
                     scales: { y: { beginAtZero: true, ticks: { stepSize: 1, precision: 0 } } },
                     plugins: { legend: { display: false }, tooltip: { backgroundColor: 'rgba(0, 0, 0, 0.7)', padding: 10 } },
                     animation: { duration: 500 }, // Re-enable modest animation
                     // Avoid potential resize loops during initialization (advanced)
                      onResize: null // Let Chart.js handle default resize internally based on container
                  }
             });
        }


        // --- Event Handlers ---
        function filterBookingsByDate() {
            const selectedDate = document.getElementById('datePicker').value;
            document.querySelectorAll('.month-header').forEach(mh => {
                let monthVisible = false;
                mh.querySelectorAll('.day-section').forEach(ds => {
                    const isVisible = !selectedDate || ds.dataset.date === selectedDate;
                    ds.style.display = isVisible ? 'block' : 'none';
                    if (isVisible) {
                        monthVisible = true;
                        if (ds.dataset.date === todayString) markPastAppointments();
                    }
                });
                mh.style.display = monthVisible ? 'block' : 'none';
            });
        }

        function showAllBookings() {
            document.getElementById('datePicker').value = '';
            document.querySelectorAll('.month-header, .day-section').forEach(el => el.style.display = 'block');
            markPastAppointments(); // Check today's appointments status
        }

        function saveAllNotes() {
            const updates = [];
            document.querySelectorAll('.notes-cell').forEach(cell => {
                if (cell.isContentEditable && cell.dataset.bookingId && cell.innerText.trim() !== (cell.dataset.originalValue || '')) {
                    updates.push({ bookingId: cell.dataset.bookingId, notes: cell.innerText.trim() });
                }
            });
            if (updates.length === 0) { displayFlashMessage("No note changes.", "info"); return; }
            fetch('/update-all-notes', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify({ updates }) })
                .then(response => response.ok ? response.json() : Promise.reject(new Error(`HTTP ${response.status}`)))
                .then(data => {
                    if (data.success) {
                        displayFlashMessage(data.message || 'Notes saved!', 'success');
                        updates.forEach(upd => { const cell = document.querySelector(`.notes-cell[data-booking-id="${upd.bookingId}"]`); if (cell) cell.dataset.originalValue = upd.notes; });
                    } else { displayFlashMessage(`Save failed: ${data.message || 'Error'}`, 'error'); }
                })
                .catch(error => { console.error('Save error:', error); displayFlashMessage(`Save error: ${error.message}`, 'error'); });
        }

        // --- Action Functions ---
        function viewDetails(bookingId) { alert("Placeholder: View details " + bookingId); }

        function markComplete(bookingId) {
            const button = event?.target.closest('button') || document.querySelector(`.actions-cell button.btn-action-complete[onclick*="${bookingId}"]`);
            if (!confirm(`Mark booking ID ${bookingId} as complete?`)) return;
            if (button) button.disabled = true;

            fetch(`/mark-complete/${bookingId}`, { method: 'POST', headers: { 'Accept': 'application/json' } })
                .then(response => response.ok ? response.json() : Promise.reject(new Error(`HTTP ${response.status} ${response.statusText}`)))
                .then(data => {
                    if (data.success) {
                        displayFlashMessage(data.message || 'Marked complete!', 'success');
                        const row = document.querySelector(`.notes-cell[data-booking-id="${bookingId}"]`)?.closest('tr');
                        if (row) {
                            row.classList.add('completed-appointment'); row.classList.remove('past-appointment');
                            row.querySelector('.notes-cell')?.setAttribute('contenteditable', 'false');
                            if (button) { button.innerHTML = '<i class="fas fa-check"></i> Completed'; button.title = 'Appointment Completed'; }
                            // Keep other buttons (like view) enabled maybe? row.querySelectorAll('.btn-action').forEach(btn => btn.disabled = true);
                        }
                    } else { displayFlashMessage(`Update failed: ${data.message || 'Error'}`, 'error'); if (button) button.disabled = false; }
                })
                .catch(error => { console.error('Mark complete error:', error); displayFlashMessage(`Update error: ${error.message}`, 'error'); if (button) button.disabled = false; });
        }

        // --- Flash Message Handling ---
        function displayFlashMessage(message, category = 'info') {
            const container = document.querySelector('.flash-messages'); if (!container) return;
            const div = document.createElement('div'); div.className = `flash-message ${category}`; div.textContent = message; container.appendChild(div);
            requestAnimationFrame(() => { div.style.opacity = '1'; div.style.transform = 'translateX(0)'; });
            setTimeout(() => { div.style.opacity = '0'; div.style.transform = 'translateX(100%)'; setTimeout(() => div.remove(), 500); }, 4500);
        }

        function hideFlashMessages() {
            document.querySelectorAll('.flash-message:not(.fade-init)').forEach(message => {
                message.classList.add('fade-init'); // Prevent re-animating on resize etc.
                requestAnimationFrame(() => { message.style.opacity = '1'; message.style.transform = 'translateX(0)'; });
                setTimeout(() => { message.style.opacity = '0'; message.style.transform = 'translateX(100%)'; setTimeout(() => message.remove(), 500); }, 4500);
            });
        }

        // --- Initial Dashboard Update ---
        function updateDashboardData() {
             console.log("Initializing dashboard components...");
             if (typeof statsData === 'undefined' || typeof chartConfigDaily === 'undefined') { console.error("Backend data (stats or chart) not found in JS scope!"); return; }
             updateStatsDisplay(statsData);
             createAppointmentsPerDayChart(chartConfigDaily);
             markPastAppointments();
             // Format date display
             document.querySelectorAll('.day-section').forEach(section => {
                 const span = section.querySelector('h3 .appointment-date-display'); if(span) span.textContent = formatDateForDisplay(section.dataset.date);
             });
         }

        // --- On Load ---
        window.onload = () => {
            hideFlashMessages(); // Show&fade backend messages
            document.querySelectorAll('.notes-cell').forEach(cell => { cell.dataset.originalValue = cell.innerText.trim(); }); // Store original notes
            updateDashboardData(); // Initialize stats, chart, dates
            setInterval(markPastAppointments, 10 * 60 * 1000); // Periodically check time
        };
    </script>

</body>
</html>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

patiant_login.html:

<!DOCTYPE html>
<html lang="en"> <!-- Set lang -->
<head>
    <meta charset="UTF-8"> <!-- Set charset -->
    <title>Patient Login</title>
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root { /* Clinic Style Palette */
             --bg-primary: #ffffff; --bg-secondary: #f8f9fa; --border-color: #dee2e6;
             --border-color-focus: #80bdff; --text-dark: #343a40; --text-medium: #6c757d;
             --text-light: #ffffff; --accent: #007bff; --accent-hover: #0056b3;
             --error: #dc3545; --error-bg: #f8d7da; --shadow-color: rgba(0, 0, 0, 0.1);
             --transition-speed: 0.3s; }
        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            background-color: var(--bg-secondary); color: var(--text-dark); font-family: 'Open Sans', 'Lato', sans-serif;
            display: flex; flex-direction: column; justify-content: center; align-items: center;
            min-height: 100vh; padding: 1rem; }

        .logo-header { /* Optional logo/header */
             margin-bottom: 1.5rem; font-size: 1.8rem; font-weight: 700; color: var(--accent); font-family: 'Lato', sans-serif; }

        .login-container {
            background: var(--bg-primary); padding: 2rem 2.5rem; border-radius: 0.5rem;
            box-shadow: 0 5px 20px var(--shadow-color); border: 1px solid var(--border-color);
            text-align: center; max-width: 400px; width: 100%;
            animation: fadeIn 0.5s ease-out; }

        @keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }

        .login-container h1 {
            color: var(--accent); margin-bottom: 1.5rem; font-size: 1.6rem; font-weight: 700; font-family: 'Lato', sans-serif; }

        .input-group { margin-bottom: 1.2rem; text-align: left; }
        .input-group label { display: block; margin-bottom: 0.4rem; color: var(--text-dark); font-size: 0.9rem; font-weight: 600; }
        .input-group input { width: 100%; padding: 0.75rem; border: 1px solid var(--border-color); border-radius: 0.3rem; background: var(--bg-primary); color: var(--text-dark); font-size: 0.95rem; transition: border-color var(--transition-speed) ease, box-shadow var(--transition-speed) ease; }
        .input-group input:focus { outline: none; border-color: var(--border-color-focus); box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); }

         /* --- Button Styles --- */
         .btn { padding: 0.7rem 1.5rem; border-radius: 0.3rem; cursor: pointer; font-weight: 600; font-size: 1rem; text-align: center; transition: all var(--transition-speed) ease-in-out; border: 1px solid transparent; text-decoration: none; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; margin: 0.5rem 0; }
         .btn:hover { transform: translateY(-2px); box-shadow: 0 3px 10px rgba(0,0,0,0.1); }
         .btn-primary { background-color: var(--accent); color: var(--text-light); border-color: var(--accent); }
         .btn-primary:hover { background-color: var(--accent-hover); border-color: var(--accent-hover); }
         .btn-outline-primary { border-color: var(--accent); color: var(--accent); background: transparent;}
         .btn-outline-primary:hover { background-color: var(--accent); color: var(--text-light);}
         .btn-block { width: 100%; }

        /* Flash Messages - Light Theme */
         .flash-messages { position: fixed; top: 20px; right: 20px; z-index: 1050; width: clamp(280px, 90%, 400px); }
         .flash-message { padding: 0.8rem 1.2rem; margin-bottom: 1rem; border-radius: 0.3rem; font-weight: 500; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); opacity: 0; transform: translateX(100%); animation: slideInFadeOut 5s ease-in-out forwards; border: 1px solid transparent; }
         .flash-message.success { background-color: #d4edda; border-color: #c3e6cb; color: #155724; }
         .flash-message.error { background-color: var(--error-bg); border-color: #f5c6cb; color: #721c24; }
         .flash-message.info { background-color: #d1ecf1; border-color: #bee5eb; color: #0c5460; }
         @keyframes slideInFadeOut { 0% { opacity: 0; transform: translateX(100%); } 10% { opacity: 1; transform: translateX(0); } 90% { opacity: 1; transform: translateX(0); } 100% { opacity: 0; transform: translateX(100%); } }

        .back-link { margin-top: 1.5rem; font-size: 0.9rem; }
        .back-link a { color: var(--accent); text-decoration: none; transition: color var(--transition-speed); }
        .back-link a:hover { color: var(--accent-hover); text-decoration: underline; }

        @media (max-width: 480px) { .login-container { padding: 1.5rem; } h1 { font-size: 1.4rem;} }
    </style>
</head>
<body>
    <!-- Flash messages -->
    <div class="flash-messages">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                     {% set category_class = category if category in ['success', 'error', 'info'] else 'info' %}
                     <div class="flash-message {{ category_class }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

     <div class="logo-header">Health Station</div>

    <div class="login-container">
        <h1>Patient Portal Login</h1>
        <p style="color: var(--text-medium); margin-bottom: 1.5rem; font-size: 0.9rem;">
             Enter your full name or phone number to view your appointments.
        </p>
        <form action="/patient-login" method="POST">
            <div class="input-group">
                <label for="patientIdentifier">Your Name or Phone Number</label>
                <input type="text" id="patientIdentifier" name="patientIdentifier" required>
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>
         <div class="back-link">
            <a href="/"><i class="fas fa-arrow-left" style="margin-right: 5px;"></i> Back to Home</a>
        </div>
    </div>

    <script>
        // JS for flash messages
        function hideFlashMessages() { /* ... same */
             const flashMessages = document.querySelectorAll('.flash-message');
             flashMessages.forEach(message => { setTimeout(() => { message.style.opacity = '0'; setTimeout(() => message.remove(), 500); }, 4000); });
        }
        window.onload = hideFlashMessages;
    </script>
</body>
</html>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

patiant_dashboard.html:

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <title>Patient Dashboard</title>
    <style>
        :root {
            --primary: #1a1a2e;
            --secondary: #16213e;
            --accent: #0ea5e9;
            --text: #e6e6e6;
            --error: #f87171;
        }

        body {
            background: var(--primary);
            color: var(--text);
            font-family: 'Segoe UI', sans-serif;
            margin: 0;
            padding: 2rem;
        }

        .dashboard-container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 2rem;
            background: var(--secondary);
            border-radius: 1.5rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        h1 {
            color: var(--accent);
            margin-bottom: 1.5rem;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2rem;
        }

        th, td {
            padding: 1rem;
            border: 1px solid #2c3a5a;
            text-align: left;
        }

        th {
            background: var(--secondary);
            color: var(--accent);
        }

        .delete-btn {
            background: var(--error);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: background 0.3s;
        }

        .delete-btn:hover {
            background: #dc2626;
        }

        .delete-btn:disabled {
            background: #6b7280;
            cursor: not-allowed;
        }
        .flash-messages {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }

    .flash-message {
        padding: 1rem;
        margin-bottom: 0.5rem;
        border-radius: 0.5rem;
        color: white;
        animation: fadeInOut 5s ease-in-out;
    }

    .flash-message.success {
        background: #4ade80; /* Green for success */
    }

    .flash-message.error {
        background: #f87171; /* Red for error */
    }

    @keyframes fadeInOut {
        0% { opacity: 0; transform: translateY(-20px); }
        10% { opacity: 1; transform: translateY(0); }
        90% { opacity: 1; transform: translateY(0); }
        100% { opacity: 0; transform: translateY(-20px); }
    }
    </style>
</head>
<body>
    <div class="flash-messages">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="flash-message {{ category }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>
    <div class="dashboard-container">
        <h1>Your Bookings</h1>
        <table>
            <thead>
                <tr>
                    <th>Doctor Name</th>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Doctor Notes</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                {% for booking in bookings %}
                <tr>
                    <td>{{ booking[2] }}</td>
                    <td>{{ booking[5] }}</td>
                    <td>{{ booking[6] }}</td>
                    <td>{{ booking[7] or 'No notes' }}</td>
                    <td>
                        {% set booking_datetime = booking[5] + ' ' + booking[6].split('-')[0] %}
                        {% if booking_datetime > current_datetime %}
                        <form action="/delete-booking/{{ booking[0] }}" method="POST">
                            <input type="hidden" name="source" value="dashboard">
                            <input type="hidden" name="patient_identifier" value="{{ patient_identifier }}">
                            <button type="submit" class="delete-btn">Delete</button>
                        </form>
                        {% else %}
                            <button class="delete-btn" disabled>Delete</button>
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    <script>
        // Function to hide flash messages after 4 seconds
        function hideFlashMessages() {
            const flashMessages = document.querySelectorAll('.flash-message');
            flashMessages.forEach(message => {
                setTimeout(() => {
                    message.style.opacity = '0';
                    setTimeout(() => message.remove(), 500); // Remove after fade-out
                }, 4000); // 4 seconds
            });
        }
    
        // Call the function when the page loads
        window.onload = hideFlashMessages;
    </script>
</body>
</html>
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''